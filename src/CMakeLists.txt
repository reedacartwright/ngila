INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

ADD_DEFINITIONS(-DHAVE_CONFIG_H
  "\"-DPACKAGE_STRING=\\\"${PROJ_NAME} ${PROJ_VERSION}\\\"\""
  "\"-DPACKAGE_BUGREPORT=\\\"${PROJ_EMAIL}\\\"\""
  "-DBOOST_ALL_NO_LIB"
)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_C_FLAGS "${MY_C_FLAGS} /wd4100 /wd4101 /wd4189 /wd4706")
  IF(USE_STATIC_LIBS)
    STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    STRING(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)
  
  # Use the highest warning level for visual studio.
  SET(CMAKE_C_WARNING_LEVEL 4)
  IF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  ELSE(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4")
  ENDIF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

IF(WIN32)
 SET(RES_SRCS ${RES_SRCS} ngila.rc)
ENDIF(WIN32)

IF(APPLE_BUNDLE_APP)
  SET(PROJ_MACOSX_BUNDLE MACOSX_BUNDLE)
ENDIF(APPLE_BUNDLE_APP)

SET(Boost_ADDITIONAL_VERSIONS 1.45 1.44 1.43 1.42 1.41)

FIND_PACKAGE(Boost 1.34.0 REQUIRED COMPONENTS program_options)
IF(Boost_FOUND)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
  IF(NOT Boost_USE_STATIC_LIBS)
    ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
  ENDIF(NOT Boost_USE_STATIC_LIBS)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${Boost_LIB_DIAGNOSTIC_DEFINITIONS}")
ENDIF(Boost_FOUND)

FIND_PACKAGE(GSL)
IF(GSL_FOUND)
  INCLUDE_DIRECTORIES(${GSL_INCLUDE_DIR})
  LINK_DIRECTORIES(${GSL_LINK_DIRECTORIES})
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GSL_EXE_LINKER_FLAGS}")
ENDIF(GSL_FOUND)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")

ADD_EXECUTABLE(ngila ${PROJ_MACOSX_BUNDLE}
  align.cpp matparser.cpp models.cpp ngila.cpp seqdb.cpp
  align.h matparser.h models.h ngila.h ngila_app.h seqdb.h seqparser.h
  xm.h ngila.cmds sort.h
  "${CMAKE_CURRENT_BINARY_DIR}/config.h"
  ${COMPAT}
  ${RES_SRCS})

IF(USE_STATIC_LIBS)
  SET_TARGET_PROPERTIES(ngila PROPERTIES LINK_SEARCH_END_STATIC On)
ENDIF(USE_STATIC_LIBS)

TARGET_LINK_LIBRARIES(ngila ${CMAKE_REQUIRED_LIBRARIES})
TARGET_LINK_LIBRARIES(ngila ${Boost_LIBRARIES})
TARGET_LINK_LIBRARIES(ngila ${GSL_LIBRARIES})

IF(APPLE_BUNDLE_APP)
  SET_TARGET_PROPERTIES(ngila PROPERTIES OUTPUT_NAME ${PROJ_BUNDLE_NAME})
  SET(PROJ_INSTALL_EXTRA_ARGS BUNDLE DESTINATION "${PROJ_BUNDLE_LOCATION}")
ENDIF(APPLE_BUNDLE_APP)

INSTALL(TARGETS ngila ${PROJ_INSTALL_EXTRA_ARGS} RUNTIME DESTINATION bin)

IF(UNIX)
  INSTALL(FILES ngila.desktop DESTINATION share/applications )
  INSTALL(FILES ngila.png DESTINATION share/pixmaps )
ENDIF(UNIX)

IF(APPLE_BUNDLE_APP)
  INSTALL(CODE "file(MAKE_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
  INSTALL(CODE "execute_process(COMMAND ln -s \"../MacOS/${PROJ_BUNDLE_NAME}\" ngila
                  WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin)")
ENDIF(APPLE_BUNDLE_APP)
