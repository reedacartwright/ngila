#define yy_create_buffer seq__create_buffer
#define yy_delete_buffer seq__delete_buffer
#define yy_scan_buffer seq__scan_buffer
#define yy_scan_string seq__scan_string
#define yy_scan_bytes seq__scan_bytes
#define yy_flex_debug seq__flex_debug
#define yy_init_buffer seq__init_buffer
#define yy_flush_buffer seq__flush_buffer
#define yy_load_buffer_state seq__load_buffer_state
#define yy_switch_to_buffer seq__switch_to_buffer
#define yyin seq_in
#define yyleng seq_leng
#define yylex seq_lex
#define yyout seq_out
#define yyrestart seq_restart
#define yytext seq_text

#line 19 "/usr/home/reed/Projects/ngila/current/src/seqscan.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef yyconst struct yy_trans_info *yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 11
#define YY_END_OF_BUFFER 12
struct yy_trans_info
	{
	short yy_verify;
	short yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[6659] =
    {
 {   0,   0 }, {   0,6531 }, {   0,   0 }, {   0,6529 }, {   1,1300 },
 {   2,1300 }, {   3,1300 }, {   4,1300 }, {   5,1300 }, {   6,1300 },
 {   7,1300 }, {   8,1300 }, {   9,1430 }, {  10,1310 }, {  11,1430 },
 {  12,1430 }, {  13,1430 }, {  14,1300 }, {  15,1300 }, {  16,1300 },
 {  17,1300 }, {  18,1300 }, {  19,1300 }, {  20,1300 }, {  21,1300 },
 {  22,1300 }, {  23,1300 }, {  24,1300 }, {  25,1300 }, {  26,1300 },
 {  27,1300 }, {  28,1300 }, {  29,1300 }, {  30,1300 }, {  31,1300 },
 {  32,1430 }, {  33,1300 }, {  34,1300 }, {  35,1489 }, {  36,1300 },
 {  37,1300 }, {  38,1300 }, {  39,1300 }, {  40,1300 }, {  41,1300 },
 {  42,1300 }, {  43,1300 }, {  44,1300 }, {  45,1300 }, {  46,1300 },

 {  47,1300 }, {  48,1619 }, {  49,1619 }, {  50,1619 }, {  51,1619 },
 {  52,1619 }, {  53,1619 }, {  54,1619 }, {  55,1619 }, {  56,1619 },
 {  57,1619 }, {  58,1300 }, {  59,1300 }, {  60,1300 }, {  61,1300 },
 {  62,1312 }, {  63,1300 }, {  64,1300 }, {  65,1300 }, {  66,1300 },
 {  67,1749 }, {  68,1300 }, {  69,1300 }, {  70,1300 }, {  71,1300 },
 {  72,1300 }, {  73,1300 }, {  74,1300 }, {  75,1300 }, {  76,1300 },
 {  77,1300 }, {  78,1300 }, {  79,1300 }, {  80,1300 }, {  81,1300 },
 {  82,1300 }, {  83,1300 }, {  84,1300 }, {  85,1300 }, {  86,1300 },
 {  87,1300 }, {  88,1300 }, {  89,1300 }, {  90,1300 }, {  91,1300 },
 {  92,1300 }, {  93,1300 }, {  94,1300 }, {  95,1300 }, {  96,1300 },

 {  97,1300 }, {  98,1300 }, {  99,1300 }, { 100,1300 }, { 101,1300 },
 { 102,1300 }, { 103,1300 }, { 104,1300 }, { 105,1300 }, { 106,1300 },
 { 107,1300 }, { 108,1300 }, { 109,1300 }, { 110,1300 }, { 111,1300 },
 { 112,1300 }, { 113,1300 }, { 114,1300 }, { 115,1300 }, { 116,1300 },
 { 117,1300 }, { 118,1300 }, { 119,1300 }, { 120,1300 }, { 121,1300 },
 { 122,1300 }, { 123,1300 }, { 124,1300 }, { 125,1300 }, { 126,1300 },
 { 127,1300 }, { 128,1300 }, {   0,   0 }, {   0,6399 }, {   1,1749 },
 {   2,1749 }, {   3,1749 }, {   4,1749 }, {   5,1749 }, {   6,1749 },
 {   7,1749 }, {   8,1749 }, {   9,1300 }, {  10,1180 }, {  11,1300 },
 {  12,1300 }, {  13,1300 }, {  14,1749 }, {  15,1749 }, {  16,1749 },

 {  17,1749 }, {  18,1749 }, {  19,1749 }, {  20,1749 }, {  21,1749 },
 {  22,1749 }, {  23,1749 }, {  24,1749 }, {  25,1749 }, {  26,1749 },
 {  27,1749 }, {  28,1749 }, {  29,1749 }, {  30,1749 }, {  31,1749 },
 {  32,1300 }, {  33,1749 }, {  34,1749 }, {  35,1879 }, {  36,1749 },
 {  37,1749 }, {  38,1749 }, {  39,1749 }, {  40,1749 }, {  41,1749 },
 {  42,1749 }, {  43,1749 }, {  44,1749 }, {  45,1749 }, {  46,1749 },
 {  47,1749 }, {  48,2009 }, {  49,2009 }, {  50,2009 }, {  51,2009 },
 {  52,2009 }, {  53,2009 }, {  54,2009 }, {  55,2009 }, {  56,2009 },
 {  57,2009 }, {  58,1749 }, {  59,1749 }, {  60,1749 }, {  61,1749 },
 {  62,1182 }, {  63,1749 }, {  64,1749 }, {  65,1749 }, {  66,1749 },

 {  67,2139 }, {  68,1749 }, {  69,1749 }, {  70,1749 }, {  71,1749 },
 {  72,1749 }, {  73,1749 }, {  74,1749 }, {  75,1749 }, {  76,1749 },
 {  77,1749 }, {  78,1749 }, {  79,1749 }, {  80,1749 }, {  81,1749 },
 {  82,1749 }, {  83,1749 }, {  84,1749 }, {  85,1749 }, {  86,1749 },
 {  87,1749 }, {  88,1749 }, {  89,1749 }, {  90,1749 }, {  91,1749 },
 {  92,1749 }, {  93,1749 }, {  94,1749 }, {  95,1749 }, {  96,1749 },
 {  97,1749 }, {  98,1749 }, {  99,1749 }, { 100,1749 }, { 101,1749 },
 { 102,1749 }, { 103,1749 }, { 104,1749 }, { 105,1749 }, { 106,1749 },
 { 107,1749 }, { 108,1749 }, { 109,1749 }, { 110,1749 }, { 111,1749 },
 { 112,1749 }, { 113,1749 }, { 114,1749 }, { 115,1749 }, { 116,1749 },

 { 117,1749 }, { 118,1749 }, { 119,1749 }, { 120,1749 }, { 121,1749 },
 { 122,1749 }, { 123,1749 }, { 124,1749 }, { 125,1749 }, { 126,1749 },
 { 127,1749 }, { 128,1749 }, {   0,   0 }, {   0,6269 }, {   1,1040 },
 {   2,1040 }, {   3,1040 }, {   4,1040 }, {   5,1040 }, {   6,1040 },
 {   7,1040 }, {   8,1040 }, {   9,2139 }, {  10,1050 }, {  11,2139 },
 {  12,2139 }, {  13,2139 }, {  14,1040 }, {  15,1040 }, {  16,1040 },
 {  17,1040 }, {  18,1040 }, {  19,1040 }, {  20,1040 }, {  21,1040 },
 {  22,1040 }, {  23,1040 }, {  24,1040 }, {  25,1040 }, {  26,1040 },
 {  27,1040 }, {  28,1040 }, {  29,1040 }, {  30,1040 }, {  31,1040 },
 {  32,2139 }, {  33,1040 }, {  34,1040 }, {  35,1040 }, {  36,1040 },

 {  37,1040 }, {  38,1040 }, {  39,1040 }, {  40,1040 }, {  41,1040 },
 {  42,1040 }, {  43,1040 }, {  44,1040 }, {  45,1040 }, {  46,1040 },
 {  47,1040 }, {  48,1040 }, {  49,1040 }, {  50,1040 }, {  51,1040 },
 {  52,1040 }, {  53,1040 }, {  54,1040 }, {  55,1040 }, {  56,1040 },
 {  57,1040 }, {  58,1040 }, {  59,1040 }, {  60,1040 }, {  61,1040 },
 {  62,1172 }, {  63,1040 }, {  64,1040 }, {  65,1040 }, {  66,1040 },
 {  67,1040 }, {  68,1040 }, {  69,1040 }, {  70,1040 }, {  71,1040 },
 {  72,1040 }, {  73,1040 }, {  74,1040 }, {  75,1040 }, {  76,1040 },
 {  77,1040 }, {  78,1040 }, {  79,1040 }, {  80,1040 }, {  81,1040 },
 {  82,1040 }, {  83,1040 }, {  84,1040 }, {  85,1040 }, {  86,1040 },

 {  87,1040 }, {  88,1040 }, {  89,1040 }, {  90,1040 }, {  91,1040 },
 {  92,1040 }, {  93,1040 }, {  94,1040 }, {  95,1040 }, {  96,1040 },
 {  97,1040 }, {  98,1040 }, {  99,1040 }, { 100,1040 }, { 101,1040 },
 { 102,1040 }, { 103,1040 }, { 104,1040 }, { 105,1040 }, { 106,1040 },
 { 107,1040 }, { 108,1040 }, { 109,1040 }, { 110,1040 }, { 111,1040 },
 { 112,1040 }, { 113,1040 }, { 114,1040 }, { 115,1040 }, { 116,1040 },
 { 117,1040 }, { 118,1040 }, { 119,1040 }, { 120,1040 }, { 121,1040 },
 { 122,1040 }, { 123,1040 }, { 124,1040 }, { 125,1040 }, { 126,1040 },
 { 127,1040 }, { 128,1040 }, {   0,   0 }, {   0,6139 }, {   1,1489 },
 {   2,1489 }, {   3,1489 }, {   4,1489 }, {   5,1489 }, {   6,1489 },

 {   7,1489 }, {   8,1489 }, {   9,2009 }, {  10, 920 }, {  11,2009 },
 {  12,2009 }, {  13,2009 }, {  14,1489 }, {  15,1489 }, {  16,1489 },
 {  17,1489 }, {  18,1489 }, {  19,1489 }, {  20,1489 }, {  21,1489 },
 {  22,1489 }, {  23,1489 }, {  24,1489 }, {  25,1489 }, {  26,1489 },
 {  27,1489 }, {  28,1489 }, {  29,1489 }, {  30,1489 }, {  31,1489 },
 {  32,2009 }, {  33,1489 }, {  34,1489 }, {  35,1489 }, {  36,1489 },
 {  37,1489 }, {  38,1489 }, {  39,1489 }, {  40,1489 }, {  41,1489 },
 {  42,1489 }, {  43,1489 }, {  44,1489 }, {  45,1489 }, {  46,1489 },
 {  47,1489 }, {  48,1489 }, {  49,1489 }, {  50,1489 }, {  51,1489 },
 {  52,1489 }, {  53,1489 }, {  54,1489 }, {  55,1489 }, {  56,1489 },

 {  57,1489 }, {  58,1489 }, {  59,1489 }, {  60,1489 }, {  61,1489 },
 {  62,1042 }, {  63,1489 }, {  64,1489 }, {  65,1489 }, {  66,1489 },
 {  67,1489 }, {  68,1489 }, {  69,1489 }, {  70,1489 }, {  71,1489 },
 {  72,1489 }, {  73,1489 }, {  74,1489 }, {  75,1489 }, {  76,1489 },
 {  77,1489 }, {  78,1489 }, {  79,1489 }, {  80,1489 }, {  81,1489 },
 {  82,1489 }, {  83,1489 }, {  84,1489 }, {  85,1489 }, {  86,1489 },
 {  87,1489 }, {  88,1489 }, {  89,1489 }, {  90,1489 }, {  91,1489 },
 {  92,1489 }, {  93,1489 }, {  94,1489 }, {  95,1489 }, {  96,1489 },
 {  97,1489 }, {  98,1489 }, {  99,1489 }, { 100,1489 }, { 101,1489 },
 { 102,1489 }, { 103,1489 }, { 104,1489 }, { 105,1489 }, { 106,1489 },

 { 107,1489 }, { 108,1489 }, { 109,1489 }, { 110,1489 }, { 111,1489 },
 { 112,1489 }, { 113,1489 }, { 114,1489 }, { 115,1489 }, { 116,1489 },
 { 117,1489 }, { 118,1489 }, { 119,1489 }, { 120,1489 }, { 121,1489 },
 { 122,1489 }, { 123,1489 }, { 124,1489 }, { 125,1489 }, { 126,1489 },
 { 127,1489 }, { 128,1489 }, {   0,   0 }, {   0,6009 }, {   1, 780 },
 {   2, 780 }, {   3, 780 }, {   4, 780 }, {   5, 780 }, {   6, 780 },
 {   7, 780 }, {   8, 780 }, {   9,1879 }, {  10, 790 }, {  11,1879 },
 {  12,1879 }, {  13,1879 }, {  14, 780 }, {  15, 780 }, {  16, 780 },
 {  17, 780 }, {  18, 780 }, {  19, 780 }, {  20, 780 }, {  21, 780 },
 {  22, 780 }, {  23, 780 }, {  24, 780 }, {  25, 780 }, {  26, 780 },

 {  27, 780 }, {  28, 780 }, {  29, 780 }, {  30, 780 }, {  31, 780 },
 {  32,1879 }, {  33, 780 }, {  34, 780 }, {  35, 780 }, {  36, 780 },
 {  37, 780 }, {  38, 780 }, {  39, 780 }, {  40, 780 }, {  41, 780 },
 {  42, 780 }, {  43, 780 }, {  44, 780 }, {  45, 780 }, {  46, 780 },
 {  47, 780 }, {  48, 780 }, {  49, 780 }, {  50, 780 }, {  51, 780 },
 {  52, 780 }, {  53, 780 }, {  54, 780 }, {  55, 780 }, {  56, 780 },
 {  57, 780 }, {  58, 780 }, {  59, 780 }, {  60, 780 }, {  61, 780 },
 {  62, 914 }, {  63, 780 }, {  64, 780 }, {  65, 780 }, {  66, 780 },
 {  67, 780 }, {  68, 780 }, {  69, 780 }, {  70, 780 }, {  71, 780 },
 {  72, 780 }, {  73, 780 }, {  74, 780 }, {  75, 780 }, {  76, 780 },

 {  77, 780 }, {  78, 780 }, {  79, 780 }, {  80, 780 }, {  81, 780 },
 {  82, 780 }, {  83, 780 }, {  84, 780 }, {  85, 780 }, {  86, 780 },
 {  87, 780 }, {  88, 780 }, {  89, 780 }, {  90, 780 }, {  91, 780 },
 {  92, 780 }, {  93, 780 }, {  94, 780 }, {  95, 780 }, {  96, 780 },
 {  97, 780 }, {  98, 780 }, {  99, 780 }, { 100, 780 }, { 101, 780 },
 { 102, 780 }, { 103, 780 }, { 104, 780 }, { 105, 780 }, { 106, 780 },
 { 107, 780 }, { 108, 780 }, { 109, 780 }, { 110, 780 }, { 111, 780 },
 { 112, 780 }, { 113, 780 }, { 114, 780 }, { 115, 780 }, { 116, 780 },
 { 117, 780 }, { 118, 780 }, { 119, 780 }, { 120, 780 }, { 121, 780 },
 { 122, 780 }, { 123, 780 }, { 124, 780 }, { 125, 780 }, { 126, 780 },

 { 127, 780 }, { 128, 780 }, {   0,   0 }, {   0,5879 }, {   1,1229 },
 {   2,1229 }, {   3,1229 }, {   4,1229 }, {   5,1229 }, {   6,1229 },
 {   7,1229 }, {   8,1229 }, {   9,1749 }, {  10, 660 }, {  11,1749 },
 {  12,1749 }, {  13,1749 }, {  14,1229 }, {  15,1229 }, {  16,1229 },
 {  17,1229 }, {  18,1229 }, {  19,1229 }, {  20,1229 }, {  21,1229 },
 {  22,1229 }, {  23,1229 }, {  24,1229 }, {  25,1229 }, {  26,1229 },
 {  27,1229 }, {  28,1229 }, {  29,1229 }, {  30,1229 }, {  31,1229 },
 {  32,1749 }, {  33,1229 }, {  34,1229 }, {  35,1229 }, {  36,1229 },
 {  37,1229 }, {  38,1229 }, {  39,1229 }, {  40,1229 }, {  41,1229 },
 {  42,1229 }, {  43,1229 }, {  44,1229 }, {  45,1229 }, {  46,1229 },

 {  47,1229 }, {  48,1229 }, {  49,1229 }, {  50,1229 }, {  51,1229 },
 {  52,1229 }, {  53,1229 }, {  54,1229 }, {  55,1229 }, {  56,1229 },
 {  57,1229 }, {  58,1229 }, {  59,1229 }, {  60,1229 }, {  61,1229 },
 {  62, 784 }, {  63,1229 }, {  64,1229 }, {  65,1229 }, {  66,1229 },
 {  67,1229 }, {  68,1229 }, {  69,1229 }, {  70,1229 }, {  71,1229 },
 {  72,1229 }, {  73,1229 }, {  74,1229 }, {  75,1229 }, {  76,1229 },
 {  77,1229 }, {  78,1229 }, {  79,1229 }, {  80,1229 }, {  81,1229 },
 {  82,1229 }, {  83,1229 }, {  84,1229 }, {  85,1229 }, {  86,1229 },
 {  87,1229 }, {  88,1229 }, {  89,1229 }, {  90,1229 }, {  91,1229 },
 {  92,1229 }, {  93,1229 }, {  94,1229 }, {  95,1229 }, {  96,1229 },

 {  97,1229 }, {  98,1229 }, {  99,1229 }, { 100,1229 }, { 101,1229 },
 { 102,1229 }, { 103,1229 }, { 104,1229 }, { 105,1229 }, { 106,1229 },
 { 107,1229 }, { 108,1229 }, { 109,1229 }, { 110,1229 }, { 111,1229 },
 { 112,1229 }, { 113,1229 }, { 114,1229 }, { 115,1229 }, { 116,1229 },
 { 117,1229 }, { 118,1229 }, { 119,1229 }, { 120,1229 }, { 121,1229 },
 { 122,1229 }, { 123,1229 }, { 124,1229 }, { 125,1229 }, { 126,1229 },
 { 127,1229 }, { 128,1229 }, {   0,   0 }, {   0,5749 }, {   1, 520 },
 {   2, 520 }, {   3, 520 }, {   4, 520 }, {   5, 520 }, {   6, 520 },
 {   7, 520 }, {   8, 520 }, {   9,1619 }, {  10, 530 }, {  11,1619 },
 {  12,1619 }, {  13,1619 }, {  14, 520 }, {  15, 520 }, {  16, 520 },

 {  17, 520 }, {  18, 520 }, {  19, 520 }, {  20, 520 }, {  21, 520 },
 {  22, 520 }, {  23, 520 }, {  24, 520 }, {  25, 520 }, {  26, 520 },
 {  27, 520 }, {  28, 520 }, {  29, 520 }, {  30, 520 }, {  31, 520 },
 {  32,1619 }, {  33, 520 }, {  34, 520 }, {  35, 520 }, {  36, 520 },
 {  37, 520 }, {  38, 520 }, {  39, 520 }, {  40, 520 }, {  41, 520 },
 {  42, 520 }, {  43, 520 }, {  44, 520 }, {  45, 520 }, {  46, 520 },
 {  47, 520 }, {  48,1638 }, {  49,1638 }, {  50,1638 }, {  51,1638 },
 {  52,1638 }, {  53,1638 }, {  54,1638 }, {  55,1638 }, {  56,1638 },
 {  57,1638 }, {  58, 520 }, {  59, 520 }, {  60, 520 }, {  61, 520 },
 {  62, 652 }, {  63, 520 }, {  64, 520 }, {  65, 520 }, {  66, 520 },

 {  67, 520 }, {  68, 520 }, {  69, 520 }, {  70, 520 }, {  71, 520 },
 {  72, 520 }, {  73, 520 }, {  74, 520 }, {  75, 520 }, {  76, 520 },
 {  77, 520 }, {  78, 520 }, {  79, 520 }, {  80, 520 }, {  81, 520 },
 {  82, 520 }, {  83, 520 }, {  84, 520 }, {  85, 520 }, {  86, 520 },
 {  87, 520 }, {  88, 520 }, {  89, 520 }, {  90, 520 }, {  91, 520 },
 {  92, 520 }, {  93, 520 }, {  94, 520 }, {  95, 520 }, {  96, 520 },
 {  97, 520 }, {  98, 520 }, {  99, 520 }, { 100, 520 }, { 101, 520 },
 { 102, 520 }, { 103, 520 }, { 104, 520 }, { 105, 520 }, { 106, 520 },
 { 107, 520 }, { 108, 520 }, { 109, 520 }, { 110, 520 }, { 111, 520 },
 { 112, 520 }, { 113, 520 }, { 114, 520 }, { 115, 520 }, { 116, 520 },

 { 117, 520 }, { 118, 520 }, { 119, 520 }, { 120, 520 }, { 121, 520 },
 { 122, 520 }, { 123, 520 }, { 124, 520 }, { 125, 520 }, { 126, 520 },
 { 127, 520 }, { 128, 520 }, {   0,   0 }, {   0,5619 }, {   1, 969 },
 {   2, 969 }, {   3, 969 }, {   4, 969 }, {   5, 969 }, {   6, 969 },
 {   7, 969 }, {   8, 969 }, {   9,1489 }, {  10, 400 }, {  11,1489 },
 {  12,1489 }, {  13,1489 }, {  14, 969 }, {  15, 969 }, {  16, 969 },
 {  17, 969 }, {  18, 969 }, {  19, 969 }, {  20, 969 }, {  21, 969 },
 {  22, 969 }, {  23, 969 }, {  24, 969 }, {  25, 969 }, {  26, 969 },
 {  27, 969 }, {  28, 969 }, {  29, 969 }, {  30, 969 }, {  31, 969 },
 {  32,1489 }, {  33, 969 }, {  34, 969 }, {  35, 969 }, {  36, 969 },

 {  37, 969 }, {  38, 969 }, {  39, 969 }, {  40, 969 }, {  41, 969 },
 {  42, 969 }, {  43, 969 }, {  44, 969 }, {  45, 969 }, {  46, 969 },
 {  47, 969 }, {  48,1638 }, {  49,1638 }, {  50,1638 }, {  51,1638 },
 {  52,1638 }, {  53,1638 }, {  54,1638 }, {  55,1638 }, {  56,1638 },
 {  57,1638 }, {  58, 969 }, {  59, 969 }, {  60, 969 }, {  61, 969 },
 {  62, 522 }, {  63, 969 }, {  64, 969 }, {  65, 969 }, {  66, 969 },
 {  67, 969 }, {  68, 969 }, {  69, 969 }, {  70, 969 }, {  71, 969 },
 {  72, 969 }, {  73, 969 }, {  74, 969 }, {  75, 969 }, {  76, 969 },
 {  77, 969 }, {  78, 969 }, {  79, 969 }, {  80, 969 }, {  81, 969 },
 {  82, 969 }, {  83, 969 }, {  84, 969 }, {  85, 969 }, {  86, 969 },

 {  87, 969 }, {  88, 969 }, {  89, 969 }, {  90, 969 }, {  91, 969 },
 {  92, 969 }, {  93, 969 }, {  94, 969 }, {  95, 969 }, {  96, 969 },
 {  97, 969 }, {  98, 969 }, {  99, 969 }, { 100, 969 }, { 101, 969 },
 { 102, 969 }, { 103, 969 }, { 104, 969 }, { 105, 969 }, { 106, 969 },
 { 107, 969 }, { 108, 969 }, { 109, 969 }, { 110, 969 }, { 111, 969 },
 { 112, 969 }, { 113, 969 }, { 114, 969 }, { 115, 969 }, { 116, 969 },
 { 117, 969 }, { 118, 969 }, { 119, 969 }, { 120, 969 }, { 121, 969 },
 { 122, 969 }, { 123, 969 }, { 124, 969 }, { 125, 969 }, { 126, 969 },
 { 127, 969 }, { 128, 969 }, {   0,   0 }, {   0,5489 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },

 {   7, 260 }, {   8, 260 }, {   9,1359 }, {  10, 270 }, {  11,1359 },
 {  12,1359 }, {  13,1359 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32,1359 }, {  33, 260 }, {  34, 260 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 260 }, {  41, 260 },
 {  42, 260 }, {  43, 260 }, {  44, 260 }, {  45, 260 }, {  46, 260 },
 {  47, 260 }, {  48,1378 }, {  49,1378 }, {  50,1378 }, {  51,1378 },
 {  52,1378 }, {  53,1378 }, {  54,1378 }, {  55,1378 }, {  56,1378 },

 {  57,1378 }, {  58, 260 }, {  59, 260 }, {  60, 260 }, {  61, 260 },
 {  62, 392 }, {  63, 260 }, {  64, 260 }, {  65, 260 }, {  66, 260 },
 {  67, 260 }, {  68, 260 }, {  69, 260 }, {  70, 260 }, {  71, 260 },
 {  72, 260 }, {  73, 260 }, {  74, 260 }, {  75, 260 }, {  76, 260 },
 {  77, 260 }, {  78, 260 }, {  79, 260 }, {  80, 260 }, {  81, 260 },
 {  82, 260 }, {  83, 260 }, {  84, 260 }, {  85, 260 }, {  86, 260 },
 {  87, 260 }, {  88, 260 }, {  89, 260 }, {  90, 260 }, {  91, 260 },
 {  92, 260 }, {  93, 260 }, {  94, 260 }, {  95, 260 }, {  96, 260 },
 {  97, 260 }, {  98, 260 }, {  99, 260 }, { 100, 260 }, { 101, 260 },
 { 102, 260 }, { 103, 260 }, { 104, 260 }, { 105, 260 }, { 106, 260 },

 { 107, 260 }, { 108, 260 }, { 109, 260 }, { 110, 260 }, { 111, 260 },
 { 112, 260 }, { 113, 260 }, { 114, 260 }, { 115, 260 }, { 116, 260 },
 { 117, 260 }, { 118, 260 }, { 119, 260 }, { 120, 260 }, { 121, 260 },
 { 122, 260 }, { 123, 260 }, { 124, 260 }, { 125, 260 }, { 126, 260 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,5359 }, {   1, 709 },
 {   2, 709 }, {   3, 709 }, {   4, 709 }, {   5, 709 }, {   6, 709 },
 {   7, 709 }, {   8, 709 }, {   9,1229 }, {  10, 140 }, {  11,1229 },
 {  12,1229 }, {  13,1229 }, {  14, 709 }, {  15, 709 }, {  16, 709 },
 {  17, 709 }, {  18, 709 }, {  19, 709 }, {  20, 709 }, {  21, 709 },
 {  22, 709 }, {  23, 709 }, {  24, 709 }, {  25, 709 }, {  26, 709 },

 {  27, 709 }, {  28, 709 }, {  29, 709 }, {  30, 709 }, {  31, 709 },
 {  32,1229 }, {  33, 709 }, {  34, 709 }, {  35, 709 }, {  36, 709 },
 {  37, 709 }, {  38, 709 }, {  39, 709 }, {  40, 709 }, {  41, 709 },
 {  42, 709 }, {  43, 709 }, {  44, 709 }, {  45, 709 }, {  46, 709 },
 {  47, 709 }, {  48,1378 }, {  49,1378 }, {  50,1378 }, {  51,1378 },
 {  52,1378 }, {  53,1378 }, {  54,1378 }, {  55,1378 }, {  56,1378 },
 {  57,1378 }, {  58, 709 }, {  59, 709 }, {  60, 709 }, {  61, 709 },
 {  62, 262 }, {  63, 709 }, {  64, 709 }, {  65, 709 }, {  66, 709 },
 {  67, 709 }, {  68, 709 }, {  69, 709 }, {  70, 709 }, {  71, 709 },
 {  72, 709 }, {  73, 709 }, {  74, 709 }, {  75, 709 }, {  76, 709 },

 {  77, 709 }, {  78, 709 }, {  79, 709 }, {  80, 709 }, {  81, 709 },
 {  82, 709 }, {  83, 709 }, {  84, 709 }, {  85, 709 }, {  86, 709 },
 {  87, 709 }, {  88, 709 }, {  89, 709 }, {  90, 709 }, {  91, 709 },
 {  92, 709 }, {  93, 709 }, {  94, 709 }, {  95, 709 }, {  96, 709 },
 {  97, 709 }, {  98, 709 }, {  99, 709 }, { 100, 709 }, { 101, 709 },
 { 102, 709 }, { 103, 709 }, { 104, 709 }, { 105, 709 }, { 106, 709 },
 { 107, 709 }, { 108, 709 }, { 109, 709 }, { 110, 709 }, { 111, 709 },
 { 112, 709 }, { 113, 709 }, { 114, 709 }, { 115, 709 }, { 116, 709 },
 { 117, 709 }, { 118, 709 }, { 119, 709 }, { 120, 709 }, { 121, 709 },
 { 122, 709 }, { 123, 709 }, { 124, 709 }, { 125, 709 }, { 126, 709 },

 { 127, 709 }, { 128, 709 }, {   0,   8 }, {   0,5229 }, {   1,1378 },
 {   2,1378 }, {   3,1378 }, {   4,1378 }, {   5,1378 }, {   6,1378 },
 {   7,1378 }, {   8,1378 }, {   0,  10 }, {   0,5219 }, {   0,   2 },
 {   0,5217 }, {   0,   0 }, {  14,1378 }, {  15,1378 }, {  16,1378 },
 {  17,1378 }, {  18,1378 }, {  19,1378 }, {  20,1378 }, {  21,1378 },
 {  22,1378 }, {  23,1378 }, {  24,1378 }, {  25,1378 }, {  26,1378 },
 {  27,1378 }, {  28,1378 }, {  29,1378 }, {  30,1378 }, {  31,1378 },
 {   0,   0 }, {  33,1378 }, {  34,1378 }, {  35,1378 }, {  36,1378 },
 {  37,1378 }, {  38,1378 }, {  39,1378 }, {  40,1378 }, {  41,1378 },
 {  42,1378 }, {  43,1378 }, {  44,1378 }, {  45,1378 }, {  46,1378 },

 {  47,1378 }, {  48,1378 }, {  49,1378 }, {  50,1378 }, {  51,1378 },
 {  52,1378 }, {  53,1378 }, {  54,1378 }, {  55,1378 }, {  56,1378 },
 {  57,1378 }, {  58,1378 }, {  59,1378 }, {  60,1378 }, {  61,1378 },
 {   0,   0 }, {  63,1378 }, {  64,1378 }, {  65,1378 }, {  66,1378 },
 {  67,1378 }, {  68,1378 }, {  69,1378 }, {  70,1378 }, {  71,1378 },
 {  72,1378 }, {  73,1378 }, {  74,1378 }, {  75,1378 }, {  76,1378 },
 {  77,1378 }, {  78,1378 }, {  79,1378 }, {  80,1378 }, {  81,1378 },
 {  82,1378 }, {  83,1378 }, {  84,1378 }, {  85,1378 }, {  86,1378 },
 {  87,1378 }, {  88,1378 }, {  89,1378 }, {  90,1378 }, {  91,1378 },
 {  92,1378 }, {  93,1378 }, {  94,1378 }, {  95,1378 }, {  96,1378 },

 {  97,1378 }, {  98,1378 }, {  99,1378 }, { 100,1378 }, { 101,1378 },
 { 102,1378 }, { 103,1378 }, { 104,1378 }, { 105,1378 }, { 106,1378 },
 { 107,1378 }, { 108,1378 }, { 109,1378 }, { 110,1378 }, { 111,1378 },
 { 112,1378 }, { 113,1378 }, { 114,1378 }, { 115,1378 }, { 116,1378 },
 { 117,1378 }, { 118,1378 }, { 119,1378 }, { 120,1378 }, { 121,1378 },
 { 122,1378 }, { 123,1378 }, { 124,1378 }, { 125,1378 }, { 126,1378 },
 { 127,1378 }, { 128,1378 }, {   0,   9 }, {   0,5099 }, {   0,  11 },
 {   0,5097 }, {   0,   5 }, {   0,5095 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,1378 }, {   0,   0 }, {  11,1378 },
 {  12,1378 }, {  13,1378 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,1378 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,1393 }, {  49,1393 }, {  50,1393 }, {  51,1393 },
 {  52,1393 }, {  53,1393 }, {  54,1393 }, {  55,1393 }, {  56,1393 },
 {  57,1393 }, {   0,   8 }, {   0,5040 }, {   1,1189 }, {   2,1189 },
 {   3,1189 }, {   4,1189 }, {   5,1189 }, {   6,1189 }, {   7,1189 },

 {   8,1189 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,1189 }, {  15,1189 }, {  16,1189 }, {  17,1189 },
 {  18,1189 }, {  19,1189 }, {  20,1189 }, {  21,1189 }, {  22,1189 },
 {  23,1189 }, {  24,1189 }, {  25,1189 }, {  26,1189 }, {  27,1189 },
 {  28,1189 }, {  29,1189 }, {  30,1189 }, {  31,1189 }, {   0,   0 },
 {  33,1189 }, {  34,1189 }, {  35,1189 }, {  36,1189 }, {  37,1189 },
 {  38,1189 }, {  39,1189 }, {  40,1189 }, {  41,1189 }, {  42,1189 },
 {  43,1189 }, {  44,1189 }, {  45,1189 }, {  46,1189 }, {  47,1189 },
 {  48,1189 }, {  49,1189 }, {  50,1189 }, {  51,1189 }, {  52,1189 },
 {  53,1189 }, {  54,1189 }, {  55,1189 }, {  56,1189 }, {  57,1189 },

 {  58,1189 }, {  59,1189 }, {  60,1189 }, {  61,1189 }, {   0,   0 },
 {  63,1189 }, {  64,1189 }, {  65,1189 }, {  66,1189 }, {  67,1189 },
 {  68,1189 }, {  69,1189 }, {  70,1189 }, {  71,1189 }, {  72,1189 },
 {  73,1189 }, {  74,1189 }, {  75,1189 }, {  76,1189 }, {  77,1189 },
 {  78,1393 }, {  79,1189 }, {  80,1189 }, {  81,1189 }, {  82,1189 },
 {  83,1189 }, {  84,1189 }, {  85,1189 }, {  86,1189 }, {  87,1189 },
 {  88,1189 }, {  89,1189 }, {  90,1189 }, {  91,1189 }, {  92,1189 },
 {  93,1189 }, {  94,1189 }, {  95,1189 }, {  96,1189 }, {  97,1189 },
 {  98,1189 }, {  99,1189 }, { 100,1189 }, { 101,1189 }, { 102,1189 },
 { 103,1189 }, { 104,1189 }, { 105,1189 }, { 106,1189 }, { 107,1189 },

 { 108,1189 }, { 109,1189 }, { 110,1189 }, { 111,1189 }, { 112,1189 },
 { 113,1189 }, { 114,1189 }, { 115,1189 }, { 116,1189 }, { 117,1189 },
 { 118,1189 }, { 119,1189 }, { 120,1189 }, { 121,1189 }, { 122,1189 },
 { 123,1189 }, { 124,1189 }, { 125,1189 }, { 126,1189 }, { 127,1189 },
 { 128,1189 }, {   0,   8 }, {   0,4910 }, {   1,1059 }, {   2,1059 },
 {   3,1059 }, {   4,1059 }, {   5,1059 }, {   6,1059 }, {   7,1059 },
 {   8,1059 }, {   9,1393 }, {   0,   0 }, {  11,1393 }, {  12,1393 },
 {  13,1393 }, {  14,1059 }, {  15,1059 }, {  16,1059 }, {  17,1059 },
 {  18,1059 }, {  19,1059 }, {  20,1059 }, {  21,1059 }, {  22,1059 },
 {  23,1059 }, {  24,1059 }, {  25,1059 }, {  26,1059 }, {  27,1059 },

 {  28,1059 }, {  29,1059 }, {  30,1059 }, {  31,1059 }, {  32,1393 },
 {  33,1059 }, {  34,1059 }, {  35,1059 }, {  36,1059 }, {  37,1059 },
 {  38,1059 }, {  39,1059 }, {  40,1059 }, {  41,1059 }, {  42,1059 },
 {  43,1059 }, {  44,1059 }, {  45,1059 }, {  46,1059 }, {  47,1059 },
 {  48,1452 }, {  49,1452 }, {  50,1452 }, {  51,1452 }, {  52,1452 },
 {  53,1452 }, {  54,1452 }, {  55,1452 }, {  56,1452 }, {  57,1452 },
 {  58,1059 }, {  59,1059 }, {  60,1059 }, {  61,1059 }, {   0,   0 },
 {  63,1059 }, {  64,1059 }, {  65,1059 }, {  66,1059 }, {  67,1059 },
 {  68,1059 }, {  69,1059 }, {  70,1059 }, {  71,1059 }, {  72,1059 },
 {  73,1059 }, {  74,1059 }, {  75,1059 }, {  76,1059 }, {  77,1059 },

 {  78,1059 }, {  79,1059 }, {  80,1059 }, {  81,1059 }, {  82,1059 },
 {  83,1059 }, {  84,1059 }, {  85,1059 }, {  86,1059 }, {  87,1059 },
 {  88,1059 }, {  89,1059 }, {  90,1059 }, {  91,1059 }, {  92,1059 },
 {  93,1059 }, {  94,1059 }, {  95,1059 }, {  96,1059 }, {  97,1059 },
 {  98,1059 }, {  99,1059 }, { 100,1059 }, { 101,1059 }, { 102,1059 },
 { 103,1059 }, { 104,1059 }, { 105,1059 }, { 106,1059 }, { 107,1059 },
 { 108,1059 }, { 109,1059 }, { 110,1059 }, { 111,1059 }, { 112,1059 },
 { 113,1059 }, { 114,1059 }, { 115,1059 }, { 116,1059 }, { 117,1059 },
 { 118,1059 }, { 119,1059 }, { 120,1059 }, { 121,1059 }, { 122,1059 },
 { 123,1059 }, { 124,1059 }, { 125,1059 }, { 126,1059 }, { 127,1059 },

 { 128,1059 }, {   0,   8 }, {   0,4780 }, {   1, 929 }, {   2, 929 },
 {   3, 929 }, {   4, 929 }, {   5, 929 }, {   6, 929 }, {   7, 929 },
 {   8, 929 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14, 929 }, {  15, 929 }, {  16, 929 }, {  17, 929 },
 {  18, 929 }, {  19, 929 }, {  20, 929 }, {  21, 929 }, {  22, 929 },
 {  23, 929 }, {  24, 929 }, {  25, 929 }, {  26, 929 }, {  27, 929 },
 {  28, 929 }, {  29, 929 }, {  30, 929 }, {  31, 929 }, {   0,   0 },
 {  33, 929 }, {  34, 929 }, {  35, 929 }, {  36, 929 }, {  37, 929 },
 {  38, 929 }, {  39, 929 }, {  40, 929 }, {  41, 929 }, {  42, 929 },
 {  43, 929 }, {  44, 929 }, {  45, 929 }, {  46, 929 }, {  47, 929 },

 {  48, 929 }, {  49, 929 }, {  50, 929 }, {  51, 929 }, {  52, 929 },
 {  53, 929 }, {  54, 929 }, {  55, 929 }, {  56, 929 }, {  57, 929 },
 {  58, 929 }, {  59, 929 }, {  60, 929 }, {  61, 929 }, {   0,   0 },
 {  63, 929 }, {  64, 929 }, {  65, 929 }, {  66, 929 }, {  67, 929 },
 {  68, 929 }, {  69, 929 }, {  70, 929 }, {  71, 929 }, {  72, 929 },
 {  73, 929 }, {  74, 929 }, {  75, 929 }, {  76,1452 }, {  77, 929 },
 {  78, 929 }, {  79, 929 }, {  80, 929 }, {  81, 929 }, {  82, 929 },
 {  83, 929 }, {  84, 929 }, {  85, 929 }, {  86, 929 }, {  87, 929 },
 {  88, 929 }, {  89, 929 }, {  90, 929 }, {  91, 929 }, {  92, 929 },
 {  93, 929 }, {  94, 929 }, {  95, 929 }, {  96, 929 }, {  97, 929 },

 {  98, 929 }, {  99, 929 }, { 100, 929 }, { 101, 929 }, { 102, 929 },
 { 103, 929 }, { 104, 929 }, { 105, 929 }, { 106, 929 }, { 107, 929 },
 { 108, 929 }, { 109, 929 }, { 110, 929 }, { 111, 929 }, { 112, 929 },
 { 113, 929 }, { 114, 929 }, { 115, 929 }, { 116, 929 }, { 117, 929 },
 { 118, 929 }, { 119, 929 }, { 120, 929 }, { 121, 929 }, { 122, 929 },
 { 123, 929 }, { 124, 929 }, { 125, 929 }, { 126, 929 }, { 127, 929 },
 { 128, 929 }, {   0,   7 }, {   0,4650 }, {   1,1452 }, {   2,1452 },
 {   3,1452 }, {   4,1452 }, {   5,1452 }, {   6,1452 }, {   7,1452 },
 {   8,1452 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,1452 }, {  15,1452 }, {  16,1452 }, {  17,1452 },

 {  18,1452 }, {  19,1452 }, {  20,1452 }, {  21,1452 }, {  22,1452 },
 {  23,1452 }, {  24,1452 }, {  25,1452 }, {  26,1452 }, {  27,1452 },
 {  28,1452 }, {  29,1452 }, {  30,1452 }, {  31,1452 }, {   0,   0 },
 {  33,1452 }, {  34,1452 }, {  35,1452 }, {  36,1452 }, {  37,1452 },
 {  38,1452 }, {  39,1452 }, {  40,1452 }, {  41,1452 }, {  42,1452 },
 {  43,1452 }, {  44,1452 }, {  45,1452 }, {  46,1452 }, {  47,1452 },
 {  48,1452 }, {  49,1452 }, {  50,1452 }, {  51,1452 }, {  52,1452 },
 {  53,1452 }, {  54,1452 }, {  55,1452 }, {  56,1452 }, {  57,1452 },
 {  58,1452 }, {  59,1452 }, {  60,1452 }, {  61,1452 }, {   0,   0 },
 {  63,1452 }, {  64,1452 }, {  65,1452 }, {  66,1452 }, {  67,1452 },

 {  68,1452 }, {  69,1452 }, {  70,1452 }, {  71,1452 }, {  72,1452 },
 {  73,1452 }, {  74,1452 }, {  75,1452 }, {  76,1452 }, {  77,1452 },
 {  78,1452 }, {  79,1452 }, {  80,1452 }, {  81,1452 }, {  82,1452 },
 {  83,1452 }, {  84,1452 }, {  85,1452 }, {  86,1452 }, {  87,1452 },
 {  88,1452 }, {  89,1452 }, {  90,1452 }, {  91,1452 }, {  92,1452 },
 {  93,1452 }, {  94,1452 }, {  95,1452 }, {  96,1452 }, {  97,1452 },
 {  98,1452 }, {  99,1452 }, { 100,1452 }, { 101,1452 }, { 102,1452 },
 { 103,1452 }, { 104,1452 }, { 105,1452 }, { 106,1452 }, { 107,1452 },
 { 108,1452 }, { 109,1452 }, { 110,1452 }, { 111,1452 }, { 112,1452 },
 { 113,1452 }, { 114,1452 }, { 115,1452 }, { 116,1452 }, { 117,1452 },

 { 118,1452 }, { 119,1452 }, { 120,1452 }, { 121,1452 }, { 122,1452 },
 { 123,1452 }, { 124,1452 }, { 125,1452 }, { 126,1452 }, { 127,1452 },
 { 128,1452 }, {   0,   7 }, {   0,4520 }, {   1,1322 }, {   2,1322 },
 {   3,1322 }, {   4,1322 }, {   5,1322 }, {   6,1322 }, {   7,1322 },
 {   8,1322 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,1322 }, {  15,1322 }, {  16,1322 }, {  17,1322 },
 {  18,1322 }, {  19,1322 }, {  20,1322 }, {  21,1322 }, {  22,1322 },
 {  23,1322 }, {  24,1322 }, {  25,1322 }, {  26,1322 }, {  27,1322 },
 {  28,1322 }, {  29,1322 }, {  30,1322 }, {  31,1322 }, {   0,   0 },
 {  33,1322 }, {  34,1322 }, {  35,1322 }, {  36,1322 }, {  37,1322 },

 {  38,1322 }, {  39,1322 }, {  40,1322 }, {  41,1322 }, {  42,1322 },
 {  43,1322 }, {  44,1322 }, {  45,1322 }, {  46,1322 }, {  47,1322 },
 {  48,1322 }, {  49,1322 }, {  50,1322 }, {  51,1322 }, {  52,1322 },
 {  53,1322 }, {  54,1322 }, {  55,1322 }, {  56,1322 }, {  57,1322 },
 {  58,1322 }, {  59,1322 }, {  60,1322 }, {  61,1322 }, {   0,   0 },
 {  63,1322 }, {  64,1322 }, {  65,1322 }, {  66,1322 }, {  67,1322 },
 {  68,1322 }, {  69,1322 }, {  70,1322 }, {  71,1322 }, {  72,1322 },
 {  73,1322 }, {  74,1322 }, {  75,1322 }, {  76,1322 }, {  77,1322 },
 {  78,1452 }, {  79,1322 }, {  80,1322 }, {  81,1322 }, {  82,1322 },
 {  83,1322 }, {  84,1322 }, {  85,1322 }, {  86,1322 }, {  87,1322 },

 {  88,1322 }, {  89,1322 }, {  90,1322 }, {  91,1322 }, {  92,1322 },
 {  93,1322 }, {  94,1322 }, {  95,1322 }, {  96,1322 }, {  97,1322 },
 {  98,1322 }, {  99,1322 }, { 100,1322 }, { 101,1322 }, { 102,1322 },
 { 103,1322 }, { 104,1322 }, { 105,1322 }, { 106,1322 }, { 107,1322 },
 { 108,1322 }, { 109,1322 }, { 110,1322 }, { 111,1322 }, { 112,1322 },
 { 113,1322 }, { 114,1322 }, { 115,1322 }, { 116,1322 }, { 117,1322 },
 { 118,1322 }, { 119,1322 }, { 120,1322 }, { 121,1322 }, { 122,1322 },
 { 123,1322 }, { 124,1322 }, { 125,1322 }, { 126,1322 }, { 127,1322 },
 { 128,1322 }, {   0,   7 }, {   0,4390 }, {   1,1192 }, {   2,1192 },
 {   3,1192 }, {   4,1192 }, {   5,1192 }, {   6,1192 }, {   7,1192 },

 {   8,1192 }, {   9, 873 }, {   0,   0 }, {  11, 873 }, {  12, 873 },
 {  13, 873 }, {  14,1192 }, {  15,1192 }, {  16,1192 }, {  17,1192 },
 {  18,1192 }, {  19,1192 }, {  20,1192 }, {  21,1192 }, {  22,1192 },
 {  23,1192 }, {  24,1192 }, {  25,1192 }, {  26,1192 }, {  27,1192 },
 {  28,1192 }, {  29,1192 }, {  30,1192 }, {  31,1192 }, {  32, 873 },
 {  33,1192 }, {  34,1192 }, {  35,1192 }, {  36,1192 }, {  37,1192 },
 {  38,1192 }, {  39,1192 }, {  40,1192 }, {  41,1192 }, {  42,1192 },
 {  43,1192 }, {  44,1192 }, {  45,1192 }, {  46,1192 }, {  47,1192 },
 {  48,1452 }, {  49,1452 }, {  50,1452 }, {  51,1452 }, {  52,1452 },
 {  53,1452 }, {  54,1452 }, {  55,1452 }, {  56,1452 }, {  57,1452 },

 {  58,1192 }, {  59,1192 }, {  60,1192 }, {  61,1192 }, {   0,   0 },
 {  63,1192 }, {  64,1192 }, {  65,1192 }, {  66,1192 }, {  67,1192 },
 {  68,1192 }, {  69,1192 }, {  70,1192 }, {  71,1192 }, {  72,1192 },
 {  73,1192 }, {  74,1192 }, {  75,1192 }, {  76,1192 }, {  77,1192 },
 {  78,1192 }, {  79,1192 }, {  80,1192 }, {  81,1192 }, {  82,1192 },
 {  83,1192 }, {  84,1192 }, {  85,1192 }, {  86,1192 }, {  87,1192 },
 {  88,1192 }, {  89,1192 }, {  90,1192 }, {  91,1192 }, {  92,1192 },
 {  93,1192 }, {  94,1192 }, {  95,1192 }, {  96,1192 }, {  97,1192 },
 {  98,1192 }, {  99,1192 }, { 100,1192 }, { 101,1192 }, { 102,1192 },
 { 103,1192 }, { 104,1192 }, { 105,1192 }, { 106,1192 }, { 107,1192 },

 { 108,1192 }, { 109,1192 }, { 110,1192 }, { 111,1192 }, { 112,1192 },
 { 113,1192 }, { 114,1192 }, { 115,1192 }, { 116,1192 }, { 117,1192 },
 { 118,1192 }, { 119,1192 }, { 120,1192 }, { 121,1192 }, { 122,1192 },
 { 123,1192 }, { 124,1192 }, { 125,1192 }, { 126,1192 }, { 127,1192 },
 { 128,1192 }, {   0,   7 }, {   0,4260 }, {   1,1062 }, {   2,1062 },
 {   3,1062 }, {   4,1062 }, {   5,1062 }, {   6,1062 }, {   7,1062 },
 {   8,1062 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,1062 }, {  15,1062 }, {  16,1062 }, {  17,1062 },
 {  18,1062 }, {  19,1062 }, {  20,1062 }, {  21,1062 }, {  22,1062 },
 {  23,1062 }, {  24,1062 }, {  25,1062 }, {  26,1062 }, {  27,1062 },

 {  28,1062 }, {  29,1062 }, {  30,1062 }, {  31,1062 }, {   0,   0 },
 {  33,1062 }, {  34,1062 }, {  35,1062 }, {  36,1062 }, {  37,1062 },
 {  38,1062 }, {  39,1062 }, {  40,1062 }, {  41,1062 }, {  42,1062 },
 {  43,1062 }, {  44,1062 }, {  45,1062 }, {  46,1062 }, {  47,1062 },
 {  48,1062 }, {  49,1062 }, {  50,1062 }, {  51,1062 }, {  52,1062 },
 {  53,1062 }, {  54,1062 }, {  55,1062 }, {  56,1062 }, {  57,1062 },
 {  58,1062 }, {  59,1062 }, {  60,1062 }, {  61,1062 }, {   0,   0 },
 {  63,1062 }, {  64,1062 }, {  65,1062 }, {  66,1062 }, {  67,1062 },
 {  68,1062 }, {  69,1062 }, {  70,1062 }, {  71,1062 }, {  72,1062 },
 {  73,1062 }, {  74,1062 }, {  75,1062 }, {  76,1452 }, {  77,1062 },

 {  78,1062 }, {  79,1062 }, {  80,1062 }, {  81,1062 }, {  82,1062 },
 {  83,1062 }, {  84,1062 }, {  85,1062 }, {  86,1062 }, {  87,1062 },
 {  88,1062 }, {  89,1062 }, {  90,1062 }, {  91,1062 }, {  92,1062 },
 {  93,1062 }, {  94,1062 }, {  95,1062 }, {  96,1062 }, {  97,1062 },
 {  98,1062 }, {  99,1062 }, { 100,1062 }, { 101,1062 }, { 102,1062 },
 { 103,1062 }, { 104,1062 }, { 105,1062 }, { 106,1062 }, { 107,1062 },
 { 108,1062 }, { 109,1062 }, { 110,1062 }, { 111,1062 }, { 112,1062 },
 { 113,1062 }, { 114,1062 }, { 115,1062 }, { 116,1062 }, { 117,1062 },
 { 118,1062 }, { 119,1062 }, { 120,1062 }, { 121,1062 }, { 122,1062 },
 { 123,1062 }, { 124,1062 }, { 125,1062 }, { 126,1062 }, { 127,1062 },

 { 128,1062 }, {   0,   9 }, {   0,4130 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,1452 }, {   0,   0 }, {  11,1452 }, {  12,1452 },
 {  13,1452 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   6 }, {   0,4111 }, {   1, 260 }, {   2, 260 }, {   3, 260 },
 {   4, 260 }, {   5, 260 }, {   6, 260 }, {   7, 260 }, {   8, 260 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,1452 },
 {  14, 260 }, {  15, 260 }, {  16, 260 }, {  17, 260 }, {  18, 260 },
 {  19, 260 }, {  20, 260 }, {  21, 260 }, {  22, 260 }, {  23, 260 },
 {  24, 260 }, {  25, 260 }, {  26, 260 }, {  27, 260 }, {  28, 260 },

 {  29, 260 }, {  30, 260 }, {  31, 260 }, {   0,   0 }, {  33, 260 },
 {  34, 260 }, {  35, 260 }, {  36, 260 }, {  37, 260 }, {  38, 260 },
 {  39, 260 }, {  40, 260 }, {  41, 260 }, {  42, 260 }, {  43, 260 },
 {  44, 260 }, {  45, 260 }, {  46, 260 }, {  47, 260 }, {  48,1452 },
 {  49,1452 }, {  50,1452 }, {  51,1452 }, {  52,1452 }, {  53,1452 },
 {  54,1452 }, {  55,1452 }, {  56,1452 }, {  57,1452 }, {  58, 260 },
 {  59, 260 }, {  60, 260 }, {  61, 260 }, {   0,   0 }, {  63, 260 },
 {  64, 260 }, {  65, 260 }, {  66, 260 }, {  67, 260 }, {  68, 260 },
 {  69, 260 }, {  70, 260 }, {  71, 260 }, {  72, 260 }, {  73, 260 },
 {  74, 260 }, {  75, 260 }, {  76, 260 }, {  77, 260 }, {  78, 260 },

 {  79, 260 }, {  80, 260 }, {  81, 260 }, {  82, 260 }, {  83, 260 },
 {  84, 260 }, {  85, 260 }, {  86, 260 }, {  87, 260 }, {  88, 260 },
 {  89, 260 }, {  90, 260 }, {  91, 260 }, {  92, 260 }, {  93, 260 },
 {  94, 260 }, {  95, 260 }, {  96, 260 }, {  97, 260 }, {  98, 260 },
 {  99, 260 }, { 100, 260 }, { 101, 260 }, { 102, 260 }, { 103, 260 },
 { 104, 260 }, { 105, 260 }, { 106, 260 }, { 107, 260 }, { 108, 260 },
 { 109, 260 }, { 110, 260 }, { 111, 260 }, { 112, 260 }, { 113, 260 },
 { 114, 260 }, { 115, 260 }, { 116, 260 }, { 117, 260 }, { 118, 260 },
 { 119, 260 }, { 120, 260 }, { 121, 260 }, { 122, 260 }, { 123, 260 },
 { 124, 260 }, { 125, 260 }, { 126, 260 }, { 127, 260 }, { 128, 260 },

 {   0,   6 }, {   0,3981 }, {   1, 783 }, {   2, 783 }, {   3, 783 },
 {   4, 783 }, {   5, 783 }, {   6, 783 }, {   7, 783 }, {   8, 783 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  14, 783 }, {  15, 783 }, {  16, 783 }, {  17, 783 }, {  18, 783 },
 {  19, 783 }, {  20, 783 }, {  21, 783 }, {  22, 783 }, {  23, 783 },
 {  24, 783 }, {  25, 783 }, {  26, 783 }, {  27, 783 }, {  28, 783 },
 {  29, 783 }, {  30, 783 }, {  31, 783 }, {   0,   0 }, {  33, 783 },
 {  34, 783 }, {  35, 783 }, {  36, 783 }, {  37, 783 }, {  38, 783 },
 {  39, 783 }, {  40, 783 }, {  41, 783 }, {  42, 783 }, {  43, 783 },
 {  44, 783 }, {  45, 783 }, {  46, 783 }, {  47, 783 }, {  48,1452 },

 {  49,1452 }, {  50,1452 }, {  51,1452 }, {  52,1452 }, {  53,1452 },
 {  54,1452 }, {  55,1452 }, {  56,1452 }, {  57,1452 }, {  58, 783 },
 {  59, 783 }, {  60, 783 }, {  61, 783 }, {   0,   0 }, {  63, 783 },
 {  64, 783 }, {  65, 783 }, {  66, 783 }, {  67, 783 }, {  68, 783 },
 {  69, 783 }, {  70, 783 }, {  71, 783 }, {  72, 783 }, {  73, 783 },
 {  74, 783 }, {  75, 783 }, {  76, 783 }, {  77, 783 }, {  78, 783 },
 {  79, 783 }, {  80, 783 }, {  81, 783 }, {  82, 783 }, {  83, 783 },
 {  84, 783 }, {  85, 783 }, {  86, 783 }, {  87, 783 }, {  88, 783 },
 {  89, 783 }, {  90, 783 }, {  91, 783 }, {  92, 783 }, {  93, 783 },
 {  94, 783 }, {  95, 783 }, {  96, 783 }, {  97, 783 }, {  98, 783 },

 {  99, 783 }, { 100, 783 }, { 101, 783 }, { 102, 783 }, { 103, 783 },
 { 104, 783 }, { 105, 783 }, { 106, 783 }, { 107, 783 }, { 108, 783 },
 { 109, 783 }, { 110, 783 }, { 111, 783 }, { 112, 783 }, { 113, 783 },
 { 114, 783 }, { 115, 783 }, { 116, 783 }, { 117, 783 }, { 118, 783 },
 { 119, 783 }, { 120, 783 }, { 121, 783 }, { 122, 783 }, { 123, 783 },
 { 124, 783 }, { 125, 783 }, { 126, 783 }, { 127, 783 }, { 128, 783 },
 {   0,   8 }, {   0,3851 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },

 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {   0,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },

 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },

 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,   9 }, {   0,3721 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {   0,   0 }, {   0,3706 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9, 189 }, {   0,   0 }, {  11, 189 }, {  12, 189 }, {  13, 189 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 189 }, {  48,  15 },
 {  49,  15 }, {  50,  15 }, {  51,  15 }, {  52,  15 }, {  53,  15 },
 {  54,  15 }, {  55,  15 }, {  56,  15 }, {  57,  15 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   8 },
 {   0,3647 }, {   1,-204 }, {   2,-204 }, {   3,-204 }, {   4,-204 },
 {   5,-204 }, {   6,-204 }, {   7,-204 }, {   8,-204 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-204 },

 {  15,-204 }, {  16,-204 }, {  17,-204 }, {  18,-204 }, {  19,-204 },
 {  20,-204 }, {  21,-204 }, {  22,-204 }, {  23,-204 }, {  24,-204 },
 {  25,-204 }, {  26,-204 }, {  27,-204 }, {  28,-204 }, {  29,-204 },
 {  30,-204 }, {  31,-204 }, {   0,   0 }, {  33,-204 }, {  34,-204 },
 {  35,-204 }, {  36,-204 }, {  37,-204 }, {  38,-204 }, {  39,-204 },
 {  40,-204 }, {  41,-204 }, {  42,-204 }, {  43,-204 }, {  44,-204 },
 {  45,-204 }, {  46,-204 }, {  47,-204 }, {  48,-204 }, {  49,-204 },
 {  50,-204 }, {  51,-204 }, {  52,-204 }, {  53,-204 }, {  54,-204 },
 {  55,-204 }, {  56,-204 }, {  57,-204 }, {  58,-204 }, {  59,-204 },
 {  60,-204 }, {  61,-204 }, {   0,   0 }, {  63,-204 }, {  64,-204 },

 {  65,-204 }, {  66,-204 }, {  67,-204 }, {  68,-204 }, {  69,1248 },
 {  70,-204 }, {  71,-204 }, {  72,-204 }, {  73,-204 }, {  74,-204 },
 {  75,-204 }, {  76,-204 }, {  77,-204 }, {  78,-204 }, {  79,-204 },
 {  80,-204 }, {  81,-204 }, {  82,-204 }, {  83,-204 }, {  84,-204 },
 {  85,-204 }, {  86,-204 }, {  87,-204 }, {  88,-204 }, {  89,-204 },
 {  90,-204 }, {  91,-204 }, {  92,-204 }, {  93,-204 }, {  94,-204 },
 {  95,-204 }, {  96,-204 }, {  97,-204 }, {  98,-204 }, {  99,-204 },
 { 100,-204 }, { 101,-204 }, { 102,-204 }, { 103,-204 }, { 104,-204 },
 { 105,-204 }, { 106,-204 }, { 107,-204 }, { 108,-204 }, { 109,-204 },
 { 110,-204 }, { 111,-204 }, { 112,-204 }, { 113,-204 }, { 114,-204 },

 { 115,-204 }, { 116,-204 }, { 117,-204 }, { 118,-204 }, { 119,-204 },
 { 120,-204 }, { 121,-204 }, { 122,-204 }, { 123,-204 }, { 124,-204 },
 { 125,-204 }, { 126,-204 }, { 127,-204 }, { 128,-204 }, {   0,   0 },
 {   0,3517 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1248 }, {  49,1248 },
 {  50,1248 }, {  51,1248 }, {  52,1248 }, {  53,1248 }, {  54,1248 },
 {  55,1248 }, {  56,1248 }, {  57,1248 }, {   0,   8 }, {   0,3458 },
 {   1,-393 }, {   2,-393 }, {   3,-393 }, {   4,-393 }, {   5,-393 },
 {   6,-393 }, {   7,-393 }, {   8,-393 }, {   9, -59 }, {   0,   0 },
 {  11, -59 }, {  12, -59 }, {  13, -59 }, {  14,-393 }, {  15,-393 },
 {  16,-393 }, {  17,-393 }, {  18,-393 }, {  19,-393 }, {  20,-393 },
 {  21,-393 }, {  22,-393 }, {  23,-393 }, {  24,-393 }, {  25,-393 },

 {  26,-393 }, {  27,-393 }, {  28,-393 }, {  29,-393 }, {  30,-393 },
 {  31,-393 }, {  32, -59 }, {  33,-393 }, {  34,-393 }, {  35,-393 },
 {  36,-393 }, {  37,-393 }, {  38,-393 }, {  39,-393 }, {  40,-393 },
 {  41,-393 }, {  42,-393 }, {  43,-393 }, {  44,-393 }, {  45,-393 },
 {  46,-393 }, {  47,-393 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,-393 }, {  59,-393 }, {  60,-393 },
 {  61,-393 }, {   0,   0 }, {  63,-393 }, {  64,-393 }, {  65,-393 },
 {  66,-393 }, {  67,-393 }, {  68,-393 }, {  69,-393 }, {  70,-393 },
 {  71,-393 }, {  72,-393 }, {  73,-393 }, {  74,-393 }, {  75,-393 },

 {  76,-393 }, {  77,-393 }, {  78,-393 }, {  79,-393 }, {  80,-393 },
 {  81,-393 }, {  82,-393 }, {  83,-393 }, {  84,-393 }, {  85,-393 },
 {  86,-393 }, {  87,-393 }, {  88,-393 }, {  89,-393 }, {  90,-393 },
 {  91,-393 }, {  92,-393 }, {  93,-393 }, {  94,-393 }, {  95,-393 },
 {  96,-393 }, {  97,-393 }, {  98,-393 }, {  99,-393 }, { 100,-393 },
 { 101,-393 }, { 102,-393 }, { 103,-393 }, { 104,-393 }, { 105,-393 },
 { 106,-393 }, { 107,-393 }, { 108,-393 }, { 109,-393 }, { 110,-393 },
 { 111,-393 }, { 112,-393 }, { 113,-393 }, { 114,-393 }, { 115,-393 },
 { 116,-393 }, { 117,-393 }, { 118,-393 }, { 119,-393 }, { 120,-393 },
 { 121,-393 }, { 122,-393 }, { 123,-393 }, { 124,-393 }, { 125,-393 },

 { 126,-393 }, { 127,-393 }, { 128,-393 }, {   0,   8 }, {   0,3328 },
 {   1,-523 }, {   2,-523 }, {   3,-523 }, {   4,-523 }, {   5,-523 },
 {   6,-523 }, {   7,-523 }, {   8,-523 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-523 }, {  15,-523 },
 {  16,-523 }, {  17,-523 }, {  18,-523 }, {  19,-523 }, {  20,-523 },
 {  21,-523 }, {  22,-523 }, {  23,-523 }, {  24,-523 }, {  25,-523 },
 {  26,-523 }, {  27,-523 }, {  28,-523 }, {  29,-523 }, {  30,-523 },
 {  31,-523 }, {   0,   0 }, {  33,-523 }, {  34,-523 }, {  35,-523 },
 {  36,-523 }, {  37,-523 }, {  38,-523 }, {  39,-523 }, {  40,-523 },
 {  41,-523 }, {  42,-523 }, {  43,-523 }, {  44,-523 }, {  45,-523 },

 {  46,-523 }, {  47,-523 }, {  48,-523 }, {  49,-523 }, {  50,-523 },
 {  51,-523 }, {  52,-523 }, {  53,-523 }, {  54,-523 }, {  55,-523 },
 {  56,-523 }, {  57,-523 }, {  58,-523 }, {  59,-523 }, {  60,-523 },
 {  61,-523 }, {   0,   0 }, {  63,-523 }, {  64,-523 }, {  65,-523 },
 {  66,-523 }, {  67,-523 }, {  68,-523 }, {  69,-523 }, {  70,-523 },
 {  71,-523 }, {  72,-523 }, {  73,-523 }, {  74,-523 }, {  75,-523 },
 {  76,-523 }, {  77,-523 }, {  78,-523 }, {  79,-523 }, {  80,-523 },
 {  81,-523 }, {  82,-523 }, {  83,-523 }, {  84,-523 }, {  85,1118 },
 {  86,-523 }, {  87,-523 }, {  88,-523 }, {  89,-523 }, {  90,-523 },
 {  91,-523 }, {  92,-523 }, {  93,-523 }, {  94,-523 }, {  95,-523 },

 {  96,-523 }, {  97,-523 }, {  98,-523 }, {  99,-523 }, { 100,-523 },
 { 101,-523 }, { 102,-523 }, { 103,-523 }, { 104,-523 }, { 105,-523 },
 { 106,-523 }, { 107,-523 }, { 108,-523 }, { 109,-523 }, { 110,-523 },
 { 111,-523 }, { 112,-523 }, { 113,-523 }, { 114,-523 }, { 115,-523 },
 { 116,-523 }, { 117,-523 }, { 118,-523 }, { 119,-523 }, { 120,-523 },
 { 121,-523 }, { 122,-523 }, { 123,-523 }, { 124,-523 }, { 125,-523 },
 { 126,-523 }, { 127,-523 }, { 128,-523 }, {   0,   7 }, {   0,3198 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,   0 }, {  15,   0 },

 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {   0,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },

 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },

 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   7 }, {   0,3068 },
 {   1,-130 }, {   2,-130 }, {   3,-130 }, {   4,-130 }, {   5,-130 },
 {   6,-130 }, {   7,-130 }, {   8,-130 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-130 }, {  15,-130 },
 {  16,-130 }, {  17,-130 }, {  18,-130 }, {  19,-130 }, {  20,-130 },
 {  21,-130 }, {  22,-130 }, {  23,-130 }, {  24,-130 }, {  25,-130 },
 {  26,-130 }, {  27,-130 }, {  28,-130 }, {  29,-130 }, {  30,-130 },
 {  31,-130 }, {   0,   0 }, {  33,-130 }, {  34,-130 }, {  35,-130 },

 {  36,-130 }, {  37,-130 }, {  38,-130 }, {  39,-130 }, {  40,-130 },
 {  41,-130 }, {  42,-130 }, {  43,-130 }, {  44,-130 }, {  45,-130 },
 {  46,-130 }, {  47,-130 }, {  48,-130 }, {  49,-130 }, {  50,-130 },
 {  51,-130 }, {  52,-130 }, {  53,-130 }, {  54,-130 }, {  55,-130 },
 {  56,-130 }, {  57,-130 }, {  58,-130 }, {  59,-130 }, {  60,-130 },
 {  61,-130 }, {   0,   0 }, {  63,-130 }, {  64,-130 }, {  65,-130 },
 {  66,-130 }, {  67,-130 }, {  68,-130 }, {  69, 988 }, {  70,-130 },
 {  71,-130 }, {  72,-130 }, {  73,-130 }, {  74,-130 }, {  75,-130 },
 {  76,-130 }, {  77,-130 }, {  78,-130 }, {  79,-130 }, {  80,-130 },
 {  81,-130 }, {  82,-130 }, {  83,-130 }, {  84,-130 }, {  85,-130 },

 {  86,-130 }, {  87,-130 }, {  88,-130 }, {  89,-130 }, {  90,-130 },
 {  91,-130 }, {  92,-130 }, {  93,-130 }, {  94,-130 }, {  95,-130 },
 {  96,-130 }, {  97,-130 }, {  98,-130 }, {  99,-130 }, { 100,-130 },
 { 101,-130 }, { 102,-130 }, { 103,-130 }, { 104,-130 }, { 105,-130 },
 { 106,-130 }, { 107,-130 }, { 108,-130 }, { 109,-130 }, { 110,-130 },
 { 111,-130 }, { 112,-130 }, { 113,-130 }, { 114,-130 }, { 115,-130 },
 { 116,-130 }, { 117,-130 }, { 118,-130 }, { 119,-130 }, { 120,-130 },
 { 121,-130 }, { 122,-130 }, { 123,-130 }, { 124,-130 }, { 125,-130 },
 { 126,-130 }, { 127,-130 }, { 128,-130 }, {   0,   7 }, {   0,2938 },
 {   1,-260 }, {   2,-260 }, {   3,-260 }, {   4,-260 }, {   5,-260 },

 {   6,-260 }, {   7,-260 }, {   8,-260 }, {   9,-579 }, {   0,   0 },
 {  11,-579 }, {  12,-579 }, {  13,-579 }, {  14,-260 }, {  15,-260 },
 {  16,-260 }, {  17,-260 }, {  18,-260 }, {  19,-260 }, {  20,-260 },
 {  21,-260 }, {  22,-260 }, {  23,-260 }, {  24,-260 }, {  25,-260 },
 {  26,-260 }, {  27,-260 }, {  28,-260 }, {  29,-260 }, {  30,-260 },
 {  31,-260 }, {  32,-579 }, {  33,-260 }, {  34,-260 }, {  35,-260 },
 {  36,-260 }, {  37,-260 }, {  38,-260 }, {  39,-260 }, {  40,-260 },
 {  41,-260 }, {  42,-260 }, {  43,-260 }, {  44,-260 }, {  45,-260 },
 {  46,-260 }, {  47,-260 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },

 {  56,   0 }, {  57,   0 }, {  58,-260 }, {  59,-260 }, {  60,-260 },
 {  61,-260 }, {   0,   0 }, {  63,-260 }, {  64,-260 }, {  65,-260 },
 {  66,-260 }, {  67,-260 }, {  68,-260 }, {  69,-260 }, {  70,-260 },
 {  71,-260 }, {  72,-260 }, {  73,-260 }, {  74,-260 }, {  75,-260 },
 {  76,-260 }, {  77,-260 }, {  78,-260 }, {  79,-260 }, {  80,-260 },
 {  81,-260 }, {  82,-260 }, {  83,-260 }, {  84,-260 }, {  85,-260 },
 {  86,-260 }, {  87,-260 }, {  88,-260 }, {  89,-260 }, {  90,-260 },
 {  91,-260 }, {  92,-260 }, {  93,-260 }, {  94,-260 }, {  95,-260 },
 {  96,-260 }, {  97,-260 }, {  98,-260 }, {  99,-260 }, { 100,-260 },
 { 101,-260 }, { 102,-260 }, { 103,-260 }, { 104,-260 }, { 105,-260 },

 { 106,-260 }, { 107,-260 }, { 108,-260 }, { 109,-260 }, { 110,-260 },
 { 111,-260 }, { 112,-260 }, { 113,-260 }, { 114,-260 }, { 115,-260 },
 { 116,-260 }, { 117,-260 }, { 118,-260 }, { 119,-260 }, { 120,-260 },
 { 121,-260 }, { 122,-260 }, { 123,-260 }, { 124,-260 }, { 125,-260 },
 { 126,-260 }, { 127,-260 }, { 128,-260 }, {   0,   7 }, {   0,2808 },
 {   1,-390 }, {   2,-390 }, {   3,-390 }, {   4,-390 }, {   5,-390 },
 {   6,-390 }, {   7,-390 }, {   8,-390 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-390 }, {  15,-390 },
 {  16,-390 }, {  17,-390 }, {  18,-390 }, {  19,-390 }, {  20,-390 },
 {  21,-390 }, {  22,-390 }, {  23,-390 }, {  24,-390 }, {  25,-390 },

 {  26,-390 }, {  27,-390 }, {  28,-390 }, {  29,-390 }, {  30,-390 },
 {  31,-390 }, {   0,   0 }, {  33,-390 }, {  34,-390 }, {  35,-390 },
 {  36,-390 }, {  37,-390 }, {  38,-390 }, {  39,-390 }, {  40,-390 },
 {  41,-390 }, {  42,-390 }, {  43,-390 }, {  44,-390 }, {  45,-390 },
 {  46,-390 }, {  47,-390 }, {  48,-390 }, {  49,-390 }, {  50,-390 },
 {  51,-390 }, {  52,-390 }, {  53,-390 }, {  54,-390 }, {  55,-390 },
 {  56,-390 }, {  57,-390 }, {  58,-390 }, {  59,-390 }, {  60,-390 },
 {  61,-390 }, {   0,   0 }, {  63,-390 }, {  64,-390 }, {  65,-390 },
 {  66,-390 }, {  67,-390 }, {  68,-390 }, {  69,-390 }, {  70,-390 },
 {  71,-390 }, {  72,-390 }, {  73,-390 }, {  74,-390 }, {  75,-390 },

 {  76,-390 }, {  77,-390 }, {  78,-390 }, {  79,-390 }, {  80,-390 },
 {  81,-390 }, {  82,-390 }, {  83,-390 }, {  84,-390 }, {  85, 858 },
 {  86,-390 }, {  87,-390 }, {  88,-390 }, {  89,-390 }, {  90,-390 },
 {  91,-390 }, {  92,-390 }, {  93,-390 }, {  94,-390 }, {  95,-390 },
 {  96,-390 }, {  97,-390 }, {  98,-390 }, {  99,-390 }, { 100,-390 },
 { 101,-390 }, { 102,-390 }, { 103,-390 }, { 104,-390 }, { 105,-390 },
 { 106,-390 }, { 107,-390 }, { 108,-390 }, { 109,-390 }, { 110,-390 },
 { 111,-390 }, { 112,-390 }, { 113,-390 }, { 114,-390 }, { 115,-390 },
 { 116,-390 }, { 117,-390 }, { 118,-390 }, { 119,-390 }, { 120,-390 },
 { 121,-390 }, { 122,-390 }, { 123,-390 }, { 124,-390 }, { 125,-390 },

 { 126,-390 }, { 127,-390 }, { 128,-390 }, {   0,   9 }, {   0,2678 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   6 }, {   0,2659 }, {   1,-1192 },
 {   2,-1192 }, {   3,-1192 }, {   4,-1192 }, {   5,-1192 }, {   6,-1192 },
 {   7,-1192 }, {   8,-1192 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {  14,-1192 }, {  15,-1192 }, {  16,-1192 },
 {  17,-1192 }, {  18,-1192 }, {  19,-1192 }, {  20,-1192 }, {  21,-1192 },
 {  22,-1192 }, {  23,-1192 }, {  24,-1192 }, {  25,-1192 }, {  26,-1192 },

 {  27,-1192 }, {  28,-1192 }, {  29,-1192 }, {  30,-1192 }, {  31,-1192 },
 {   0,   0 }, {  33,-1192 }, {  34,-1192 }, {  35,-1192 }, {  36,-1192 },
 {  37,-1192 }, {  38,-1192 }, {  39,-1192 }, {  40,-1192 }, {  41,-1192 },
 {  42,-1192 }, {  43,-1192 }, {  44,-1192 }, {  45,-1192 }, {  46,-1192 },
 {  47,-1192 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,-1192 }, {  59,-1192 }, {  60,-1192 }, {  61,-1192 },
 {   0,   0 }, {  63,-1192 }, {  64,-1192 }, {  65,-1192 }, {  66,-1192 },
 {  67,-1192 }, {  68,-1192 }, {  69,-1192 }, {  70,-1192 }, {  71,-1192 },
 {  72,-1192 }, {  73,-1192 }, {  74,-1192 }, {  75,-1192 }, {  76,-1192 },

 {  77,-1192 }, {  78,-1192 }, {  79,-1192 }, {  80,-1192 }, {  81,-1192 },
 {  82,-1192 }, {  83,-1192 }, {  84,-1192 }, {  85,-1192 }, {  86,-1192 },
 {  87,-1192 }, {  88,-1192 }, {  89,-1192 }, {  90,-1192 }, {  91,-1192 },
 {  92,-1192 }, {  93,-1192 }, {  94,-1192 }, {  95,-1192 }, {  96,-1192 },
 {  97,-1192 }, {  98,-1192 }, {  99,-1192 }, { 100,-1192 }, { 101,-1192 },
 { 102,-1192 }, { 103,-1192 }, { 104,-1192 }, { 105,-1192 }, { 106,-1192 },
 { 107,-1192 }, { 108,-1192 }, { 109,-1192 }, { 110,-1192 }, { 111,-1192 },
 { 112,-1192 }, { 113,-1192 }, { 114,-1192 }, { 115,-1192 }, { 116,-1192 },
 { 117,-1192 }, { 118,-1192 }, { 119,-1192 }, { 120,-1192 }, { 121,-1192 },
 { 122,-1192 }, { 123,-1192 }, { 124,-1192 }, { 125,-1192 }, { 126,-1192 },

 { 127,-1192 }, { 128,-1192 }, {   0,   6 }, {   0,2529 }, {   1,-669 },
 {   2,-669 }, {   3,-669 }, {   4,-669 }, {   5,-669 }, {   6,-669 },
 {   7,-669 }, {   8,-669 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  14,-669 }, {  15,-669 }, {  16,-669 },
 {  17,-669 }, {  18,-669 }, {  19,-669 }, {  20,-669 }, {  21,-669 },
 {  22,-669 }, {  23,-669 }, {  24,-669 }, {  25,-669 }, {  26,-669 },
 {  27,-669 }, {  28,-669 }, {  29,-669 }, {  30,-669 }, {  31,-669 },
 {   0,   0 }, {  33,-669 }, {  34,-669 }, {  35,-669 }, {  36,-669 },
 {  37,-669 }, {  38,-669 }, {  39,-669 }, {  40,-669 }, {  41,-669 },
 {  42,-669 }, {  43,-669 }, {  44,-669 }, {  45,-669 }, {  46,-669 },

 {  47,-669 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,-669 }, {  59,-669 }, {  60,-669 }, {  61,-669 },
 {   0,   0 }, {  63,-669 }, {  64,-669 }, {  65,-669 }, {  66,-669 },
 {  67,-669 }, {  68,-669 }, {  69,-669 }, {  70,-669 }, {  71,-669 },
 {  72,-669 }, {  73,-669 }, {  74,-669 }, {  75,-669 }, {  76,-669 },
 {  77,-669 }, {  78,-669 }, {  79,-669 }, {  80,-669 }, {  81,-669 },
 {  82,-669 }, {  83,-669 }, {  84,-669 }, {  85,-669 }, {  86,-669 },
 {  87,-669 }, {  88,-669 }, {  89,-669 }, {  90,-669 }, {  91,-669 },
 {  92,-669 }, {  93,-669 }, {  94,-669 }, {  95,-669 }, {  96,-669 },

 {  97,-669 }, {  98,-669 }, {  99,-669 }, { 100,-669 }, { 101,-669 },
 { 102,-669 }, { 103,-669 }, { 104,-669 }, { 105,-669 }, { 106,-669 },
 { 107,-669 }, { 108,-669 }, { 109,-669 }, { 110,-669 }, { 111,-669 },
 { 112,-669 }, { 113,-669 }, { 114,-669 }, { 115,-669 }, { 116,-669 },
 { 117,-669 }, { 118,-669 }, { 119,-669 }, { 120,-669 }, { 121,-669 },
 { 122,-669 }, { 123,-669 }, { 124,-669 }, { 125,-669 }, { 126,-669 },
 { 127,-669 }, { 128,-669 }, {   0,   8 }, {   0,2399 }, {   1,-1452 },
 {   2,-1452 }, {   3,-1452 }, {   4,-1452 }, {   5,-1452 }, {   6,-1452 },
 {   7,-1452 }, {   8,-1452 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  14,-1452 }, {  15,-1452 }, {  16,-1452 },

 {  17,-1452 }, {  18,-1452 }, {  19,-1452 }, {  20,-1452 }, {  21,-1452 },
 {  22,-1452 }, {  23,-1452 }, {  24,-1452 }, {  25,-1452 }, {  26,-1452 },
 {  27,-1452 }, {  28,-1452 }, {  29,-1452 }, {  30,-1452 }, {  31,-1452 },
 {   0,   0 }, {  33,-1452 }, {  34,-1452 }, {  35,-1452 }, {  36,-1452 },
 {  37,-1452 }, {  38,-1452 }, {  39,-1452 }, {  40,-1452 }, {  41,-1452 },
 {  42,-1452 }, {  43,-1452 }, {  44,-1452 }, {  45,-1452 }, {  46,-1452 },
 {  47,-1452 }, {  48,-1452 }, {  49,-1452 }, {  50,-1452 }, {  51,-1452 },
 {  52,-1452 }, {  53,-1452 }, {  54,-1452 }, {  55,-1452 }, {  56,-1452 },
 {  57,-1452 }, {  58,-1452 }, {  59,-1452 }, {  60,-1452 }, {  61,-1452 },
 {   0,   0 }, {  63,-1452 }, {  64,-1452 }, {  65,-1452 }, {  66,-1452 },

 {  67,-1452 }, {  68,-1452 }, {  69,-1452 }, {  70,-1452 }, {  71,-1452 },
 {  72,-1452 }, {  73,-1452 }, {  74,-1452 }, {  75,-1452 }, {  76,-1452 },
 {  77,-1452 }, {  78,-1452 }, {  79,-1452 }, {  80,-1452 }, {  81,-1452 },
 {  82,-1452 }, {  83,-1452 }, {  84,-1452 }, {  85,-1452 }, {  86,-1452 },
 {  87,-1452 }, {  88, 579 }, {  89,-1452 }, {  90,-1452 }, {  91,-1452 },
 {  92,-1452 }, {  93,-1452 }, {  94,-1452 }, {  95,-1452 }, {  96,-1452 },
 {  97,-1452 }, {  98,-1452 }, {  99,-1452 }, { 100,-1452 }, { 101,-1452 },
 { 102,-1452 }, { 103,-1452 }, { 104,-1452 }, { 105,-1452 }, { 106,-1452 },
 { 107,-1452 }, { 108,-1452 }, { 109,-1452 }, { 110,-1452 }, { 111,-1452 },
 { 112,-1452 }, { 113,-1452 }, { 114,-1452 }, { 115,-1452 }, { 116,-1452 },

 { 117,-1452 }, { 118,-1452 }, { 119,-1452 }, { 120,-1452 }, { 121,-1452 },
 { 122,-1452 }, { 123,-1452 }, { 124,-1452 }, { 125,-1452 }, { 126,-1452 },
 { 127,-1452 }, { 128,-1452 }, {   0,   3 }, {   0,2269 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   8 }, {   0,2210 }, {   1,-1641 }, {   2,-1641 },
 {   3,-1641 }, {   4,-1641 }, {   5,-1641 }, {   6,-1641 }, {   7,-1641 },
 {   8,-1641 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1641 }, {  15,-1641 }, {  16,-1641 }, {  17,-1641 },
 {  18,-1641 }, {  19,-1641 }, {  20,-1641 }, {  21,-1641 }, {  22,-1641 },
 {  23,-1641 }, {  24,-1641 }, {  25,-1641 }, {  26,-1641 }, {  27,-1641 },

 {  28,-1641 }, {  29,-1641 }, {  30,-1641 }, {  31,-1641 }, {   0,   0 },
 {  33,-1641 }, {  34,-1641 }, {  35,-1641 }, {  36,-1641 }, {  37,-1641 },
 {  38,-1641 }, {  39,-1641 }, {  40,-1641 }, {  41,-1641 }, {  42,-1641 },
 {  43,-1641 }, {  44,-1641 }, {  45,-1641 }, {  46,-1641 }, {  47,-1641 },
 {  48,-1641 }, {  49,-1641 }, {  50,-1641 }, {  51,-1641 }, {  52,-1641 },
 {  53,-1641 }, {  54,-1641 }, {  55,-1641 }, {  56,-1641 }, {  57,-1641 },
 {  58,-1641 }, {  59,-1641 }, {  60,-1641 }, {  61,-1641 }, {   0,   0 },
 {  63,-1641 }, {  64,-1641 }, {  65,-1641 }, {  66,-1641 }, {  67,-1641 },
 {  68,-1641 }, {  69,-1641 }, {  70,-1641 }, {  71,-1641 }, {  72,-1641 },
 {  73,-1641 }, {  74,-1641 }, {  75,-1641 }, {  76,-1641 }, {  77,-1641 },

 {  78,-1641 }, {  79,-1641 }, {  80,-1641 }, {  81,-1641 }, {  82,-1641 },
 {  83, 520 }, {  84,-1641 }, {  85,-1641 }, {  86,-1641 }, {  87,-1641 },
 {  88,-1641 }, {  89,-1641 }, {  90,-1641 }, {  91,-1641 }, {  92,-1641 },
 {  93,-1641 }, {  94,-1641 }, {  95,-1641 }, {  96,-1641 }, {  97,-1641 },
 {  98,-1641 }, {  99,-1641 }, { 100,-1641 }, { 101,-1641 }, { 102,-1641 },
 { 103,-1641 }, { 104,-1641 }, { 105,-1641 }, { 106,-1641 }, { 107,-1641 },
 { 108,-1641 }, { 109,-1641 }, { 110,-1641 }, { 111,-1641 }, { 112,-1641 },
 { 113,-1641 }, { 114,-1641 }, { 115,-1641 }, { 116,-1641 }, { 117,-1641 },
 { 118,-1641 }, { 119,-1641 }, { 120,-1641 }, { 121,-1641 }, { 122,-1641 },
 { 123,-1641 }, { 124,-1641 }, { 125,-1641 }, { 126,-1641 }, { 127,-1641 },

 { 128,-1641 }, {   0,   7 }, {   0,2080 }, {   1,-1118 }, {   2,-1118 },
 {   3,-1118 }, {   4,-1118 }, {   5,-1118 }, {   6,-1118 }, {   7,-1118 },
 {   8,-1118 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1118 }, {  15,-1118 }, {  16,-1118 }, {  17,-1118 },
 {  18,-1118 }, {  19,-1118 }, {  20,-1118 }, {  21,-1118 }, {  22,-1118 },
 {  23,-1118 }, {  24,-1118 }, {  25,-1118 }, {  26,-1118 }, {  27,-1118 },
 {  28,-1118 }, {  29,-1118 }, {  30,-1118 }, {  31,-1118 }, {   0,   0 },
 {  33,-1118 }, {  34,-1118 }, {  35,-1118 }, {  36,-1118 }, {  37,-1118 },
 {  38,-1118 }, {  39,-1118 }, {  40,-1118 }, {  41,-1118 }, {  42,-1118 },
 {  43,-1118 }, {  44,-1118 }, {  45,-1118 }, {  46,-1118 }, {  47,-1118 },

 {  48,-1118 }, {  49,-1118 }, {  50,-1118 }, {  51,-1118 }, {  52,-1118 },
 {  53,-1118 }, {  54,-1118 }, {  55,-1118 }, {  56,-1118 }, {  57,-1118 },
 {  58,-1118 }, {  59,-1118 }, {  60,-1118 }, {  61,-1118 }, {   0,   0 },
 {  63,-1118 }, {  64,-1118 }, {  65,-1118 }, {  66,-1118 }, {  67,-1118 },
 {  68,-1118 }, {  69,-1118 }, {  70,-1118 }, {  71,-1118 }, {  72,-1118 },
 {  73,-1118 }, {  74,-1118 }, {  75,-1118 }, {  76,-1118 }, {  77,-1118 },
 {  78,-1118 }, {  79,-1118 }, {  80,-1118 }, {  81,-1118 }, {  82,-1118 },
 {  83,-1118 }, {  84,-1118 }, {  85,-1118 }, {  86,-1118 }, {  87,-1118 },
 {  88, 520 }, {  89,-1118 }, {  90,-1118 }, {  91,-1118 }, {  92,-1118 },
 {  93,-1118 }, {  94,-1118 }, {  95,-1118 }, {  96,-1118 }, {  97,-1118 },

 {  98,-1118 }, {  99,-1118 }, { 100,-1118 }, { 101,-1118 }, { 102,-1118 },
 { 103,-1118 }, { 104,-1118 }, { 105,-1118 }, { 106,-1118 }, { 107,-1118 },
 { 108,-1118 }, { 109,-1118 }, { 110,-1118 }, { 111,-1118 }, { 112,-1118 },
 { 113,-1118 }, { 114,-1118 }, { 115,-1118 }, { 116,-1118 }, { 117,-1118 },
 { 118,-1118 }, { 119,-1118 }, { 120,-1118 }, { 121,-1118 }, { 122,-1118 },
 { 123,-1118 }, { 124,-1118 }, { 125,-1118 }, { 126,-1118 }, { 127,-1118 },
 { 128,-1118 }, {   0,   7 }, {   0,1950 }, {   1,-1248 }, {   2,-1248 },
 {   3,-1248 }, {   4,-1248 }, {   5,-1248 }, {   6,-1248 }, {   7,-1248 },
 {   8,-1248 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1248 }, {  15,-1248 }, {  16,-1248 }, {  17,-1248 },

 {  18,-1248 }, {  19,-1248 }, {  20,-1248 }, {  21,-1248 }, {  22,-1248 },
 {  23,-1248 }, {  24,-1248 }, {  25,-1248 }, {  26,-1248 }, {  27,-1248 },
 {  28,-1248 }, {  29,-1248 }, {  30,-1248 }, {  31,-1248 }, {   0,   0 },
 {  33,-1248 }, {  34,-1248 }, {  35,-1248 }, {  36,-1248 }, {  37,-1248 },
 {  38,-1248 }, {  39,-1248 }, {  40,-1248 }, {  41,-1248 }, {  42,-1248 },
 {  43,-1248 }, {  44,-1248 }, {  45,-1248 }, {  46,-1248 }, {  47,-1248 },
 {  48,-1248 }, {  49,-1248 }, {  50,-1248 }, {  51,-1248 }, {  52,-1248 },
 {  53,-1248 }, {  54,-1248 }, {  55,-1248 }, {  56,-1248 }, {  57,-1248 },
 {  58,-1248 }, {  59,-1248 }, {  60,-1248 }, {  61,-1248 }, {   0,   0 },
 {  63,-1248 }, {  64,-1248 }, {  65,-1248 }, {  66,-1248 }, {  67,-1248 },

 {  68,-1248 }, {  69,-1248 }, {  70,-1248 }, {  71,-1248 }, {  72,-1248 },
 {  73,-1248 }, {  74,-1248 }, {  75,-1248 }, {  76,-1248 }, {  77,-1248 },
 {  78,-1248 }, {  79,-1248 }, {  80,-1248 }, {  81,-1248 }, {  82,-1248 },
 {  83, 520 }, {  84,-1248 }, {  85,-1248 }, {  86,-1248 }, {  87,-1248 },
 {  88,-1248 }, {  89,-1248 }, {  90,-1248 }, {  91,-1248 }, {  92,-1248 },
 {  93,-1248 }, {  94,-1248 }, {  95,-1248 }, {  96,-1248 }, {  97,-1248 },
 {  98,-1248 }, {  99,-1248 }, { 100,-1248 }, { 101,-1248 }, { 102,-1248 },
 { 103,-1248 }, { 104,-1248 }, { 105,-1248 }, { 106,-1248 }, { 107,-1248 },
 { 108,-1248 }, { 109,-1248 }, { 110,-1248 }, { 111,-1248 }, { 112,-1248 },
 { 113,-1248 }, { 114,-1248 }, { 115,-1248 }, { 116,-1248 }, { 117,-1248 },

 { 118,-1248 }, { 119,-1248 }, { 120,-1248 }, { 121,-1248 }, { 122,-1248 },
 { 123,-1248 }, { 124,-1248 }, { 125,-1248 }, { 126,-1248 }, { 127,-1248 },
 { 128,-1248 }, {   0,   8 }, {   0,1820 }, {   1,-2031 }, {   2,-2031 },
 {   3,-2031 }, {   4,-2031 }, {   5,-2031 }, {   6,-2031 }, {   7,-2031 },
 {   8,-2031 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2031 }, {  15,-2031 }, {  16,-2031 }, {  17,-2031 },
 {  18,-2031 }, {  19,-2031 }, {  20,-2031 }, {  21,-2031 }, {  22,-2031 },
 {  23,-2031 }, {  24,-2031 }, {  25,-2031 }, {  26,-2031 }, {  27,-2031 },
 {  28,-2031 }, {  29,-2031 }, {  30,-2031 }, {  31,-2031 }, {   0,   0 },
 {  33,-2031 }, {  34,-2031 }, {  35,-2031 }, {  36,-2031 }, {  37,-2031 },

 {  38,-2031 }, {  39,-2031 }, {  40,-2031 }, {  41,-2031 }, {  42,-2031 },
 {  43,-2031 }, {  44,-2031 }, {  45,-2031 }, {  46,-2031 }, {  47,-2031 },
 {  48,-2031 }, {  49,-2031 }, {  50,-2031 }, {  51,-2031 }, {  52,-2031 },
 {  53,-2031 }, {  54,-2031 }, {  55,-2031 }, {  56,-2031 }, {  57,-2031 },
 {  58,-2031 }, {  59,-2031 }, {  60,-2031 }, {  61,-2031 }, {   0,   0 },
 {  63,-2031 }, {  64,-2031 }, {  65,-2031 }, {  66,-2031 }, {  67,-2031 },
 {  68,-2031 }, {  69,-2031 }, {  70,-2031 }, {  71,-2031 }, {  72,-2031 },
 {  73,-2031 }, {  74,-2031 }, {  75,-2031 }, {  76,-2031 }, {  77,-2031 },
 {  78,-2031 }, {  79,-2031 }, {  80,-2031 }, {  81,-2031 }, {  82,-2031 },
 {  83,-2031 }, {  84,-2031 }, {  85, 520 }, {  86,-2031 }, {  87,-2031 },

 {  88,-2031 }, {  89,-2031 }, {  90,-2031 }, {  91,-2031 }, {  92,-2031 },
 {  93,-2031 }, {  94,-2031 }, {  95,-2031 }, {  96,-2031 }, {  97,-2031 },
 {  98,-2031 }, {  99,-2031 }, { 100,-2031 }, { 101,-2031 }, { 102,-2031 },
 { 103,-2031 }, { 104,-2031 }, { 105,-2031 }, { 106,-2031 }, { 107,-2031 },
 { 108,-2031 }, { 109,-2031 }, { 110,-2031 }, { 111,-2031 }, { 112,-2031 },
 { 113,-2031 }, { 114,-2031 }, { 115,-2031 }, { 116,-2031 }, { 117,-2031 },
 { 118,-2031 }, { 119,-2031 }, { 120,-2031 }, { 121,-2031 }, { 122,-2031 },
 { 123,-2031 }, { 124,-2031 }, { 125,-2031 }, { 126,-2031 }, { 127,-2031 },
 { 128,-2031 }, {   0,   8 }, {   0,1690 }, {   1,-2161 }, {   2,-2161 },
 {   3,-2161 }, {   4,-2161 }, {   5,-2161 }, {   6,-2161 }, {   7,-2161 },

 {   8,-2161 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2161 }, {  15,-2161 }, {  16,-2161 }, {  17,-2161 },
 {  18,-2161 }, {  19,-2161 }, {  20,-2161 }, {  21,-2161 }, {  22,-2161 },
 {  23,-2161 }, {  24,-2161 }, {  25,-2161 }, {  26,-2161 }, {  27,-2161 },
 {  28,-2161 }, {  29,-2161 }, {  30,-2161 }, {  31,-2161 }, {   0,   0 },
 {  33,-2161 }, {  34,-2161 }, {  35,-2161 }, {  36,-2161 }, {  37,-2161 },
 {  38,-2161 }, {  39,-2161 }, {  40,-2161 }, {  41,-2161 }, {  42,-2161 },
 {  43,-2161 }, {  44,-2161 }, {  45,-2161 }, {  46,-2161 }, {  47,-2161 },
 {  48,-2161 }, {  49,-2161 }, {  50,-2161 }, {  51,-2161 }, {  52,-2161 },
 {  53,-2161 }, {  54,-2161 }, {  55,-2161 }, {  56,-2161 }, {  57,-2161 },

 {  58,-2161 }, {  59,-2161 }, {  60,-2161 }, {  61,-2161 }, {   0,   0 },
 {  63,-2161 }, {  64,-2161 }, {  65,-2161 }, {  66,-2161 }, {  67,-2161 },
 {  68,-2161 }, {  69,-2161 }, {  70,-2161 }, {  71,-2161 }, {  72,-2161 },
 {  73,-2161 }, {  74,-2161 }, {  75,-2161 }, {  76,-2161 }, {  77,-2161 },
 {  78,-2161 }, {  79,-2161 }, {  80,-2161 }, {  81,-2161 }, {  82,-2161 },
 {  83,-2161 }, {  84, 520 }, {  85,-2161 }, {  86,-2161 }, {  87,-2161 },
 {  88,-2161 }, {  89,-2161 }, {  90,-2161 }, {  91,-2161 }, {  92,-2161 },
 {  93,-2161 }, {  94,-2161 }, {  95,-2161 }, {  96,-2161 }, {  97,-2161 },
 {  98,-2161 }, {  99,-2161 }, { 100,-2161 }, { 101,-2161 }, { 102,-2161 },
 { 103,-2161 }, { 104,-2161 }, { 105,-2161 }, { 106,-2161 }, { 107,-2161 },

 { 108,-2161 }, { 109,-2161 }, { 110,-2161 }, { 111,-2161 }, { 112,-2161 },
 { 113,-2161 }, { 114,-2161 }, { 115,-2161 }, { 116,-2161 }, { 117,-2161 },
 { 118,-2161 }, { 119,-2161 }, { 120,-2161 }, { 121,-2161 }, { 122,-2161 },
 { 123,-2161 }, { 124,-2161 }, { 125,-2161 }, { 126,-2161 }, { 127,-2161 },
 { 128,-2161 }, {   0,   7 }, {   0,1560 }, {   1,-1638 }, {   2,-1638 },
 {   3,-1638 }, {   4,-1638 }, {   5,-1638 }, {   6,-1638 }, {   7,-1638 },
 {   8,-1638 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1638 }, {  15,-1638 }, {  16,-1638 }, {  17,-1638 },
 {  18,-1638 }, {  19,-1638 }, {  20,-1638 }, {  21,-1638 }, {  22,-1638 },
 {  23,-1638 }, {  24,-1638 }, {  25,-1638 }, {  26,-1638 }, {  27,-1638 },

 {  28,-1638 }, {  29,-1638 }, {  30,-1638 }, {  31,-1638 }, {   0,   0 },
 {  33,-1638 }, {  34,-1638 }, {  35,-1638 }, {  36,-1638 }, {  37,-1638 },
 {  38,-1638 }, {  39,-1638 }, {  40,-1638 }, {  41,-1638 }, {  42,-1638 },
 {  43,-1638 }, {  44,-1638 }, {  45,-1638 }, {  46,-1638 }, {  47,-1638 },
 {  48,-1638 }, {  49,-1638 }, {  50,-1638 }, {  51,-1638 }, {  52,-1638 },
 {  53,-1638 }, {  54,-1638 }, {  55,-1638 }, {  56,-1638 }, {  57,-1638 },
 {  58,-1638 }, {  59,-1638 }, {  60,-1638 }, {  61,-1638 }, {   0,   0 },
 {  63,-1638 }, {  64,-1638 }, {  65,-1638 }, {  66,-1638 }, {  67,-1638 },
 {  68,-1638 }, {  69,-1638 }, {  70,-1638 }, {  71,-1638 }, {  72,-1638 },
 {  73,-1638 }, {  74,-1638 }, {  75,-1638 }, {  76,-1638 }, {  77,-1638 },

 {  78,-1638 }, {  79,-1638 }, {  80,-1638 }, {  81,-1638 }, {  82,-1638 },
 {  83,-1638 }, {  84,-1638 }, {  85, 520 }, {  86,-1638 }, {  87,-1638 },
 {  88,-1638 }, {  89,-1638 }, {  90,-1638 }, {  91,-1638 }, {  92,-1638 },
 {  93,-1638 }, {  94,-1638 }, {  95,-1638 }, {  96,-1638 }, {  97,-1638 },
 {  98,-1638 }, {  99,-1638 }, { 100,-1638 }, { 101,-1638 }, { 102,-1638 },
 { 103,-1638 }, { 104,-1638 }, { 105,-1638 }, { 106,-1638 }, { 107,-1638 },
 { 108,-1638 }, { 109,-1638 }, { 110,-1638 }, { 111,-1638 }, { 112,-1638 },
 { 113,-1638 }, { 114,-1638 }, { 115,-1638 }, { 116,-1638 }, { 117,-1638 },
 { 118,-1638 }, { 119,-1638 }, { 120,-1638 }, { 121,-1638 }, { 122,-1638 },
 { 123,-1638 }, { 124,-1638 }, { 125,-1638 }, { 126,-1638 }, { 127,-1638 },

 { 128,-1638 }, {   0,   7 }, {   0,1430 }, {   1,-1768 }, {   2,-1768 },
 {   3,-1768 }, {   4,-1768 }, {   5,-1768 }, {   6,-1768 }, {   7,-1768 },
 {   8,-1768 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1768 }, {  15,-1768 }, {  16,-1768 }, {  17,-1768 },
 {  18,-1768 }, {  19,-1768 }, {  20,-1768 }, {  21,-1768 }, {  22,-1768 },
 {  23,-1768 }, {  24,-1768 }, {  25,-1768 }, {  26,-1768 }, {  27,-1768 },
 {  28,-1768 }, {  29,-1768 }, {  30,-1768 }, {  31,-1768 }, {   0,   0 },
 {  33,-1768 }, {  34,-1768 }, {  35,-1768 }, {  36,-1768 }, {  37,-1768 },
 {  38,-1768 }, {  39,-1768 }, {  40,-1768 }, {  41,-1768 }, {  42,-1768 },
 {  43,-1768 }, {  44,-1768 }, {  45,-1768 }, {  46,-1768 }, {  47,-1768 },

 {  48,-1768 }, {  49,-1768 }, {  50,-1768 }, {  51,-1768 }, {  52,-1768 },
 {  53,-1768 }, {  54,-1768 }, {  55,-1768 }, {  56,-1768 }, {  57,-1768 },
 {  58,-1768 }, {  59,-1768 }, {  60,-1768 }, {  61,-1768 }, {   0,   0 },
 {  63,-1768 }, {  64,-1768 }, {  65,-1768 }, {  66,-1768 }, {  67,-1768 },
 {  68,-1768 }, {  69,-1768 }, {  70,-1768 }, {  71,-1768 }, {  72,-1768 },
 {  73,-1768 }, {  74,-1768 }, {  75,-1768 }, {  76,-1768 }, {  77,-1768 },
 {  78,-1768 }, {  79,-1768 }, {  80,-1768 }, {  81,-1768 }, {  82,-1768 },
 {  83,-1768 }, {  84, 520 }, {  85,-1768 }, {  86,-1768 }, {  87,-1768 },
 {  88,-1768 }, {  89,-1768 }, {  90,-1768 }, {  91,-1768 }, {  92,-1768 },
 {  93,-1768 }, {  94,-1768 }, {  95,-1768 }, {  96,-1768 }, {  97,-1768 },

 {  98,-1768 }, {  99,-1768 }, { 100,-1768 }, { 101,-1768 }, { 102,-1768 },
 { 103,-1768 }, { 104,-1768 }, { 105,-1768 }, { 106,-1768 }, { 107,-1768 },
 { 108,-1768 }, { 109,-1768 }, { 110,-1768 }, { 111,-1768 }, { 112,-1768 },
 { 113,-1768 }, { 114,-1768 }, { 115,-1768 }, { 116,-1768 }, { 117,-1768 },
 { 118,-1768 }, { 119,-1768 }, { 120,-1768 }, { 121,-1768 }, { 122,-1768 },
 { 123,-1768 }, { 124,-1768 }, { 125,-1768 }, { 126,-1768 }, { 127,-1768 },
 { 128,-1768 }, {   0,   8 }, {   0,1300 }, {   1,-2551 }, {   2,-2551 },
 {   3,-2551 }, {   4,-2551 }, {   5,-2551 }, {   6,-2551 }, {   7,-2551 },
 {   8,-2551 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2551 }, {  15,-2551 }, {  16,-2551 }, {  17,-2551 },

 {  18,-2551 }, {  19,-2551 }, {  20,-2551 }, {  21,-2551 }, {  22,-2551 },
 {  23,-2551 }, {  24,-2551 }, {  25,-2551 }, {  26,-2551 }, {  27,-2551 },
 {  28,-2551 }, {  29,-2551 }, {  30,-2551 }, {  31,-2551 }, {   0,   0 },
 {  33,-2551 }, {  34,-2551 }, {  35,-2551 }, {  36,-2551 }, {  37,-2551 },
 {  38,-2551 }, {  39,-2551 }, {  40,-2551 }, {  41,-2551 }, {  42,-2551 },
 {  43,-2551 }, {  44,-2551 }, {  45,-2551 }, {  46,-2551 }, {  47,-2551 },
 {  48,-2551 }, {  49,-2551 }, {  50,-2551 }, {  51,-2551 }, {  52,-2551 },
 {  53,-2551 }, {  54,-2551 }, {  55,-2551 }, {  56,-2551 }, {  57,-2551 },
 {  58,-2551 }, {  59,-2551 }, {  60,-2551 }, {  61,-2551 }, {   0,   0 },
 {  63,-2551 }, {  64,-2551 }, {  65,-2551 }, {  66,-2551 }, {  67,-2551 },

 {  68,-2551 }, {  69,-2551 }, {  70,-2551 }, {  71,-2551 }, {  72,-2551 },
 {  73,-2551 }, {  74,-2551 }, {  75,-2551 }, {  76,-2551 }, {  77,-2551 },
 {  78,-2551 }, {  79,-2551 }, {  80,-2551 }, {  81,-2551 }, {  82,-2551 },
 {  83, 520 }, {  84,-2551 }, {  85,-2551 }, {  86,-2551 }, {  87,-2551 },
 {  88,-2551 }, {  89,-2551 }, {  90,-2551 }, {  91,-2551 }, {  92,-2551 },
 {  93,-2551 }, {  94,-2551 }, {  95,-2551 }, {  96,-2551 }, {  97,-2551 },
 {  98,-2551 }, {  99,-2551 }, { 100,-2551 }, { 101,-2551 }, { 102,-2551 },
 { 103,-2551 }, { 104,-2551 }, { 105,-2551 }, { 106,-2551 }, { 107,-2551 },
 { 108,-2551 }, { 109,-2551 }, { 110,-2551 }, { 111,-2551 }, { 112,-2551 },
 { 113,-2551 }, { 114,-2551 }, { 115,-2551 }, { 116,-2551 }, { 117,-2551 },

 { 118,-2551 }, { 119,-2551 }, { 120,-2551 }, { 121,-2551 }, { 122,-2551 },
 { 123,-2551 }, { 124,-2551 }, { 125,-2551 }, { 126,-2551 }, { 127,-2551 },
 { 128,-2551 }, {   0,   8 }, {   0,1170 }, {   1,-2681 }, {   2,-2681 },
 {   3,-2681 }, {   4,-2681 }, {   5,-2681 }, {   6,-2681 }, {   7,-2681 },
 {   8,-2681 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2681 }, {  15,-2681 }, {  16,-2681 }, {  17,-2681 },
 {  18,-2681 }, {  19,-2681 }, {  20,-2681 }, {  21,-2681 }, {  22,-2681 },
 {  23,-2681 }, {  24,-2681 }, {  25,-2681 }, {  26,-2681 }, {  27,-2681 },
 {  28,-2681 }, {  29,-2681 }, {  30,-2681 }, {  31,-2681 }, {   0,   0 },
 {  33,-2681 }, {  34,-2681 }, {  35,-2681 }, {  36,-2681 }, {  37,-2681 },

 {  38,-2681 }, {  39,-2681 }, {  40,-2681 }, {  41,-2681 }, {  42,-2681 },
 {  43,-2681 }, {  44,-2681 }, {  45,-2681 }, {  46,-2681 }, {  47,-2681 },
 {  48,-2681 }, {  49,-2681 }, {  50,-2681 }, {  51,-2681 }, {  52,-2681 },
 {  53,-2681 }, {  54,-2681 }, {  55,-2681 }, {  56,-2681 }, {  57,-2681 },
 {  58,-2681 }, {  59,-2681 }, {  60,-2681 }, {  61,-2681 }, {   0,   0 },
 {  63,-2681 }, {  64,-2681 }, {  65, 520 }, {  66,-2681 }, {  67,-2681 },
 {  68,-2681 }, {  69,-2681 }, {  70,-2681 }, {  71,-2681 }, {  72,-2681 },
 {  73,-2681 }, {  74,-2681 }, {  75,-2681 }, {  76,-2681 }, {  77,-2681 },
 {  78,-2681 }, {  79,-2681 }, {  80,-2681 }, {  81,-2681 }, {  82,-2681 },
 {  83,-2681 }, {  84,-2681 }, {  85,-2681 }, {  86,-2681 }, {  87,-2681 },

 {  88,-2681 }, {  89,-2681 }, {  90,-2681 }, {  91,-2681 }, {  92,-2681 },
 {  93,-2681 }, {  94,-2681 }, {  95,-2681 }, {  96,-2681 }, {  97,-2681 },
 {  98,-2681 }, {  99,-2681 }, { 100,-2681 }, { 101,-2681 }, { 102,-2681 },
 { 103,-2681 }, { 104,-2681 }, { 105,-2681 }, { 106,-2681 }, { 107,-2681 },
 { 108,-2681 }, { 109,-2681 }, { 110,-2681 }, { 111,-2681 }, { 112,-2681 },
 { 113,-2681 }, { 114,-2681 }, { 115,-2681 }, { 116,-2681 }, { 117,-2681 },
 { 118,-2681 }, { 119,-2681 }, { 120,-2681 }, { 121,-2681 }, { 122,-2681 },
 { 123,-2681 }, { 124,-2681 }, { 125,-2681 }, { 126,-2681 }, { 127,-2681 },
 { 128,-2681 }, {   0,   7 }, {   0,1040 }, {   1,-2158 }, {   2,-2158 },
 {   3,-2158 }, {   4,-2158 }, {   5,-2158 }, {   6,-2158 }, {   7,-2158 },

 {   8,-2158 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2158 }, {  15,-2158 }, {  16,-2158 }, {  17,-2158 },
 {  18,-2158 }, {  19,-2158 }, {  20,-2158 }, {  21,-2158 }, {  22,-2158 },
 {  23,-2158 }, {  24,-2158 }, {  25,-2158 }, {  26,-2158 }, {  27,-2158 },
 {  28,-2158 }, {  29,-2158 }, {  30,-2158 }, {  31,-2158 }, {   0,   0 },
 {  33,-2158 }, {  34,-2158 }, {  35,-2158 }, {  36,-2158 }, {  37,-2158 },
 {  38,-2158 }, {  39,-2158 }, {  40,-2158 }, {  41,-2158 }, {  42,-2158 },
 {  43,-2158 }, {  44,-2158 }, {  45,-2158 }, {  46,-2158 }, {  47,-2158 },
 {  48,-2158 }, {  49,-2158 }, {  50,-2158 }, {  51,-2158 }, {  52,-2158 },
 {  53,-2158 }, {  54,-2158 }, {  55,-2158 }, {  56,-2158 }, {  57,-2158 },

 {  58,-2158 }, {  59,-2158 }, {  60,-2158 }, {  61,-2158 }, {   0,   0 },
 {  63,-2158 }, {  64,-2158 }, {  65,-2158 }, {  66,-2158 }, {  67,-2158 },
 {  68,-2158 }, {  69,-2158 }, {  70,-2158 }, {  71,-2158 }, {  72,-2158 },
 {  73,-2158 }, {  74,-2158 }, {  75,-2158 }, {  76,-2158 }, {  77,-2158 },
 {  78,-2158 }, {  79,-2158 }, {  80,-2158 }, {  81,-2158 }, {  82,-2158 },
 {  83, 520 }, {  84,-2158 }, {  85,-2158 }, {  86,-2158 }, {  87,-2158 },
 {  88,-2158 }, {  89,-2158 }, {  90,-2158 }, {  91,-2158 }, {  92,-2158 },
 {  93,-2158 }, {  94,-2158 }, {  95,-2158 }, {  96,-2158 }, {  97,-2158 },
 {  98,-2158 }, {  99,-2158 }, { 100,-2158 }, { 101,-2158 }, { 102,-2158 },
 { 103,-2158 }, { 104,-2158 }, { 105,-2158 }, { 106,-2158 }, { 107,-2158 },

 { 108,-2158 }, { 109,-2158 }, { 110,-2158 }, { 111,-2158 }, { 112,-2158 },
 { 113,-2158 }, { 114,-2158 }, { 115,-2158 }, { 116,-2158 }, { 117,-2158 },
 { 118,-2158 }, { 119,-2158 }, { 120,-2158 }, { 121,-2158 }, { 122,-2158 },
 { 123,-2158 }, { 124,-2158 }, { 125,-2158 }, { 126,-2158 }, { 127,-2158 },
 { 128,-2158 }, {   0,   7 }, {   0, 910 }, {   1,-2288 }, {   2,-2288 },
 {   3,-2288 }, {   4,-2288 }, {   5,-2288 }, {   6,-2288 }, {   7,-2288 },
 {   8,-2288 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2288 }, {  15,-2288 }, {  16,-2288 }, {  17,-2288 },
 {  18,-2288 }, {  19,-2288 }, {  20,-2288 }, {  21,-2288 }, {  22,-2288 },
 {  23,-2288 }, {  24,-2288 }, {  25,-2288 }, {  26,-2288 }, {  27,-2288 },

 {  28,-2288 }, {  29,-2288 }, {  30,-2288 }, {  31,-2288 }, {   0,   0 },
 {  33,-2288 }, {  34,-2288 }, {  35,-2288 }, {  36,-2288 }, {  37,-2288 },
 {  38,-2288 }, {  39,-2288 }, {  40,-2288 }, {  41,-2288 }, {  42,-2288 },
 {  43,-2288 }, {  44,-2288 }, {  45,-2288 }, {  46,-2288 }, {  47,-2288 },
 {  48,-2288 }, {  49,-2288 }, {  50,-2288 }, {  51,-2288 }, {  52,-2288 },
 {  53,-2288 }, {  54,-2288 }, {  55,-2288 }, {  56,-2288 }, {  57,-2288 },
 {  58,-2288 }, {  59,-2288 }, {  60,-2288 }, {  61,-2288 }, {   0,   0 },
 {  63,-2288 }, {  64,-2288 }, {  65, 520 }, {  66,-2288 }, {  67,-2288 },
 {  68,-2288 }, {  69,-2288 }, {  70,-2288 }, {  71,-2288 }, {  72,-2288 },
 {  73,-2288 }, {  74,-2288 }, {  75,-2288 }, {  76,-2288 }, {  77,-2288 },

 {  78,-2288 }, {  79,-2288 }, {  80,-2288 }, {  81,-2288 }, {  82,-2288 },
 {  83,-2288 }, {  84,-2288 }, {  85,-2288 }, {  86,-2288 }, {  87,-2288 },
 {  88,-2288 }, {  89,-2288 }, {  90,-2288 }, {  91,-2288 }, {  92,-2288 },
 {  93,-2288 }, {  94,-2288 }, {  95,-2288 }, {  96,-2288 }, {  97,-2288 },
 {  98,-2288 }, {  99,-2288 }, { 100,-2288 }, { 101,-2288 }, { 102,-2288 },
 { 103,-2288 }, { 104,-2288 }, { 105,-2288 }, { 106,-2288 }, { 107,-2288 },
 { 108,-2288 }, { 109,-2288 }, { 110,-2288 }, { 111,-2288 }, { 112,-2288 },
 { 113,-2288 }, { 114,-2288 }, { 115,-2288 }, { 116,-2288 }, { 117,-2288 },
 { 118,-2288 }, { 119,-2288 }, { 120,-2288 }, { 121,-2288 }, { 122,-2288 },
 { 123,-2288 }, { 124,-2288 }, { 125,-2288 }, { 126,-2288 }, { 127,-2288 },

 { 128,-2288 }, {   0,   4 }, {   0, 780 }, {   1,-3071 }, {   2,-3071 },
 {   3,-3071 }, {   4,-3071 }, {   5,-3071 }, {   6,-3071 }, {   7,-3071 },
 {   8,-3071 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-3071 }, {  15,-3071 }, {  16,-3071 }, {  17,-3071 },
 {  18,-3071 }, {  19,-3071 }, {  20,-3071 }, {  21,-3071 }, {  22,-3071 },
 {  23,-3071 }, {  24,-3071 }, {  25,-3071 }, {  26,-3071 }, {  27,-3071 },
 {  28,-3071 }, {  29,-3071 }, {  30,-3071 }, {  31,-3071 }, {   0,   0 },
 {  33,-3071 }, {  34,-3071 }, {  35,-3071 }, {  36,-3071 }, {  37,-3071 },
 {  38,-3071 }, {  39,-3071 }, {  40,-3071 }, {  41,-3071 }, {  42,-3071 },
 {  43,-3071 }, {  44,-3071 }, {  45,-3071 }, {  46,-3071 }, {  47,-3071 },

 {  48,-3071 }, {  49,-3071 }, {  50,-3071 }, {  51,-3071 }, {  52,-3071 },
 {  53,-3071 }, {  54,-3071 }, {  55,-3071 }, {  56,-3071 }, {  57,-3071 },
 {  58,-3071 }, {  59,-3071 }, {  60,-3071 }, {  61,-3071 }, {   0,   0 },
 {  63,-3071 }, {  64,-3071 }, {  65,-3071 }, {  66,-3071 }, {  67,-3071 },
 {  68,-3071 }, {  69,-3071 }, {  70,-3071 }, {  71,-3071 }, {  72,-3071 },
 {  73,-3071 }, {  74,-3071 }, {  75,-3071 }, {  76,-3071 }, {  77,-3071 },
 {  78,-3071 }, {  79,-3071 }, {  80,-3071 }, {  81,-3071 }, {  82,-3071 },
 {  83,-3071 }, {  84,-3071 }, {  85,-3071 }, {  86,-3071 }, {  87,-3071 },
 {  88,-3071 }, {  89,-3071 }, {  90,-3071 }, {  91,-3071 }, {  92,-3071 },
 {  93,-3071 }, {  94,-3071 }, {  95,-3071 }, {  96,-3071 }, {  97,-3071 },

 {  98,-3071 }, {  99,-3071 }, { 100,-3071 }, { 101,-3071 }, { 102,-3071 },
 { 103,-3071 }, { 104,-3071 }, { 105,-3071 }, { 106,-3071 }, { 107,-3071 },
 { 108,-3071 }, { 109,-3071 }, { 110,-3071 }, { 111,-3071 }, { 112,-3071 },
 { 113,-3071 }, { 114,-3071 }, { 115,-3071 }, { 116,-3071 }, { 117,-3071 },
 { 118,-3071 }, { 119,-3071 }, { 120,-3071 }, { 121,-3071 }, { 122,-3071 },
 { 123,-3071 }, { 124,-3071 }, { 125,-3071 }, { 126,-3071 }, { 127,-3071 },
 { 128,-3071 }, {   0,   8 }, {   0, 650 }, {   1,-3201 }, {   2,-3201 },
 {   3,-3201 }, {   4,-3201 }, {   5,-3201 }, {   6,-3201 }, {   7,-3201 },
 {   8,-3201 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-3201 }, {  15,-3201 }, {  16,-3201 }, {  17,-3201 },

 {  18,-3201 }, {  19,-3201 }, {  20,-3201 }, {  21,-3201 }, {  22,-3201 },
 {  23,-3201 }, {  24,-3201 }, {  25,-3201 }, {  26,-3201 }, {  27,-3201 },
 {  28,-3201 }, {  29,-3201 }, {  30,-3201 }, {  31,-3201 }, {   0,   0 },
 {  33,-3201 }, {  34,-3201 }, {  35,-3201 }, {  36,-3201 }, {  37,-3201 },
 {  38,-3201 }, {  39,-3201 }, {  40,-3201 }, {  41,-3201 }, {  42,-3201 },
 {  43,-3201 }, {  44,-3201 }, {  45,-3201 }, {  46,-3201 }, {  47,-3201 },
 {  48,-3201 }, {  49,-3201 }, {  50,-3201 }, {  51,-3201 }, {  52,-3201 },
 {  53,-3201 }, {  54,-3201 }, {  55,-3201 }, {  56,-3201 }, {  57,-3201 },
 {  58,-3201 }, {  59,-3201 }, {  60,-3201 }, {  61,-3201 }, {   0,   0 },
 {  63,-3201 }, {  64,-3201 }, {  65,-3201 }, {  66,-3201 }, {  67,-3201 },

 {  68,-3201 }, {  69,-3201 }, {  70,-3201 }, {  71,-3201 }, {  72,-3201 },
 {  73,-3201 }, {  74,-3201 }, {  75,-3201 }, {  76, 390 }, {  77,-3201 },
 {  78,-3201 }, {  79,-3201 }, {  80,-3201 }, {  81,-3201 }, {  82,-3201 },
 {  83,-3201 }, {  84,-3201 }, {  85,-3201 }, {  86,-3201 }, {  87,-3201 },
 {  88,-3201 }, {  89,-3201 }, {  90,-3201 }, {  91,-3201 }, {  92,-3201 },
 {  93,-3201 }, {  94,-3201 }, {  95,-3201 }, {  96,-3201 }, {  97,-3201 },
 {  98,-3201 }, {  99,-3201 }, { 100,-3201 }, { 101,-3201 }, { 102,-3201 },
 { 103,-3201 }, { 104,-3201 }, { 105,-3201 }, { 106,-3201 }, { 107,-3201 },
 { 108,-3201 }, { 109,-3201 }, { 110,-3201 }, { 111,-3201 }, { 112,-3201 },
 { 113,-3201 }, { 114,-3201 }, { 115,-3201 }, { 116,-3201 }, { 117,-3201 },

 { 118,-3201 }, { 119,-3201 }, { 120,-3201 }, { 121,-3201 }, { 122,-3201 },
 { 123,-3201 }, { 124,-3201 }, { 125,-3201 }, { 126,-3201 }, { 127,-3201 },
 { 128,-3201 }, {   0,   4 }, {   0, 520 }, {   1,-2678 }, {   2,-2678 },
 {   3,-2678 }, {   4,-2678 }, {   5,-2678 }, {   6,-2678 }, {   7,-2678 },
 {   8,-2678 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2678 }, {  15,-2678 }, {  16,-2678 }, {  17,-2678 },
 {  18,-2678 }, {  19,-2678 }, {  20,-2678 }, {  21,-2678 }, {  22,-2678 },
 {  23,-2678 }, {  24,-2678 }, {  25,-2678 }, {  26,-2678 }, {  27,-2678 },
 {  28,-2678 }, {  29,-2678 }, {  30,-2678 }, {  31,-2678 }, {   0,   0 },
 {  33,-2678 }, {  34,-2678 }, {  35,-2678 }, {  36,-2678 }, {  37,-2678 },

 {  38,-2678 }, {  39,-2678 }, {  40,-2678 }, {  41,-2678 }, {  42,-2678 },
 {  43,-2678 }, {  44,-2678 }, {  45,-2678 }, {  46,-2678 }, {  47,-2678 },
 {  48,-2678 }, {  49,-2678 }, {  50,-2678 }, {  51,-2678 }, {  52,-2678 },
 {  53,-2678 }, {  54,-2678 }, {  55,-2678 }, {  56,-2678 }, {  57,-2678 },
 {  58,-2678 }, {  59,-2678 }, {  60,-2678 }, {  61,-2678 }, {   0,   0 },
 {  63,-2678 }, {  64,-2678 }, {  65,-2678 }, {  66,-2678 }, {  67,-2678 },
 {  68,-2678 }, {  69,-2678 }, {  70,-2678 }, {  71,-2678 }, {  72,-2678 },
 {  73,-2678 }, {  74,-2678 }, {  75,-2678 }, {  76,-2678 }, {  77,-2678 },
 {  78,-2678 }, {  79,-2678 }, {  80,-2678 }, {  81,-2678 }, {  82,-2678 },
 {  83,-2678 }, {  84,-2678 }, {  85,-2678 }, {  86,-2678 }, {  87,-2678 },

 {  88,-2678 }, {  89,-2678 }, {  90,-2678 }, {  91,-2678 }, {  92,-2678 },
 {  93,-2678 }, {  94,-2678 }, {  95,-2678 }, {  96,-2678 }, {  97,-2678 },
 {  98,-2678 }, {  99,-2678 }, { 100,-2678 }, { 101,-2678 }, { 102,-2678 },
 { 103,-2678 }, { 104,-2678 }, { 105,-2678 }, { 106,-2678 }, { 107,-2678 },
 { 108,-2678 }, { 109,-2678 }, { 110,-2678 }, { 111,-2678 }, { 112,-2678 },
 { 113,-2678 }, { 114,-2678 }, { 115,-2678 }, { 116,-2678 }, { 117,-2678 },
 { 118,-2678 }, { 119,-2678 }, { 120,-2678 }, { 121,-2678 }, { 122,-2678 },
 { 123,-2678 }, { 124,-2678 }, { 125,-2678 }, { 126,-2678 }, { 127,-2678 },
 { 128,-2678 }, {   0,   7 }, {   0, 390 }, {   1,-2808 }, {   2,-2808 },
 {   3,-2808 }, {   4,-2808 }, {   5,-2808 }, {   6,-2808 }, {   7,-2808 },

 {   8,-2808 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-2808 }, {  15,-2808 }, {  16,-2808 }, {  17,-2808 },
 {  18,-2808 }, {  19,-2808 }, {  20,-2808 }, {  21,-2808 }, {  22,-2808 },
 {  23,-2808 }, {  24,-2808 }, {  25,-2808 }, {  26,-2808 }, {  27,-2808 },
 {  28,-2808 }, {  29,-2808 }, {  30,-2808 }, {  31,-2808 }, {   0,   0 },
 {  33,-2808 }, {  34,-2808 }, {  35,-2808 }, {  36,-2808 }, {  37,-2808 },
 {  38,-2808 }, {  39,-2808 }, {  40,-2808 }, {  41,-2808 }, {  42,-2808 },
 {  43,-2808 }, {  44,-2808 }, {  45,-2808 }, {  46,-2808 }, {  47,-2808 },
 {  48,-2808 }, {  49,-2808 }, {  50,-2808 }, {  51,-2808 }, {  52,-2808 },
 {  53,-2808 }, {  54,-2808 }, {  55,-2808 }, {  56,-2808 }, {  57,-2808 },

 {  58,-2808 }, {  59,-2808 }, {  60,-2808 }, {  61,-2808 }, {   0,   0 },
 {  63,-2808 }, {  64,-2808 }, {  65,-2808 }, {  66,-2808 }, {  67,-2808 },
 {  68,-2808 }, {  69,-2808 }, {  70,-2808 }, {  71,-2808 }, {  72,-2808 },
 {  73,-2808 }, {  74,-2808 }, {  75,-2808 }, {  76, 260 }, {  77,-2808 },
 {  78,-2808 }, {  79,-2808 }, {  80,-2808 }, {  81,-2808 }, {  82,-2808 },
 {  83,-2808 }, {  84,-2808 }, {  85,-2808 }, {  86,-2808 }, {  87,-2808 },
 {  88,-2808 }, {  89,-2808 }, {  90,-2808 }, {  91,-2808 }, {  92,-2808 },
 {  93,-2808 }, {  94,-2808 }, {  95,-2808 }, {  96,-2808 }, {  97,-2808 },
 {  98,-2808 }, {  99,-2808 }, { 100,-2808 }, { 101,-2808 }, { 102,-2808 },
 { 103,-2808 }, { 104,-2808 }, { 105,-2808 }, { 106,-2808 }, { 107,-2808 },

 { 108,-2808 }, { 109,-2808 }, { 110,-2808 }, { 111,-2808 }, { 112,-2808 },
 { 113,-2808 }, { 114,-2808 }, { 115,-2808 }, { 116,-2808 }, { 117,-2808 },
 { 118,-2808 }, { 119,-2808 }, { 120,-2808 }, { 121,-2808 }, { 122,-2808 },
 { 123,-2808 }, { 124,-2808 }, { 125,-2808 }, { 126,-2808 }, { 127,-2808 },
 { 128,-2808 }, {   0,   1 }, {   0, 260 }, {   1,-3591 }, {   2,-3591 },
 {   3,-3591 }, {   4,-3591 }, {   5,-3591 }, {   6,-3591 }, {   7,-3591 },
 {   8,-3591 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-3591 }, {  15,-3591 }, {  16,-3591 }, {  17,-3591 },
 {  18,-3591 }, {  19,-3591 }, {  20,-3591 }, {  21,-3591 }, {  22,-3591 },
 {  23,-3591 }, {  24,-3591 }, {  25,-3591 }, {  26,-3591 }, {  27,-3591 },

 {  28,-3591 }, {  29,-3591 }, {  30,-3591 }, {  31,-3591 }, {   0,   0 },
 {  33,-3591 }, {  34,-3591 }, {  35,-3591 }, {  36,-3591 }, {  37,-3591 },
 {  38,-3591 }, {  39,-3591 }, {  40,-3591 }, {  41,-3591 }, {  42,-3591 },
 {  43,-3591 }, {  44,-3591 }, {  45,-3591 }, {  46,-3591 }, {  47,-3591 },
 {  48,-3591 }, {  49,-3591 }, {  50,-3591 }, {  51,-3591 }, {  52,-3591 },
 {  53,-3591 }, {  54,-3591 }, {  55,-3591 }, {  56,-3591 }, {  57,-3591 },
 {  58,-3591 }, {  59,-3591 }, {  60,-3591 }, {  61,-3591 }, {   0,   0 },
 {  63,-3591 }, {  64,-3591 }, {  65,-3591 }, {  66,-3591 }, {  67,-3591 },
 {  68,-3591 }, {  69,-3591 }, {  70,-3591 }, {  71,-3591 }, {  72,-3591 },
 {  73,-3591 }, {  74,-3591 }, {  75,-3591 }, {  76,-3591 }, {  77,-3591 },

 {  78,-3591 }, {  79,-3591 }, {  80,-3591 }, {  81,-3591 }, {  82,-3591 },
 {  83,-3591 }, {  84,-3591 }, {  85,-3591 }, {  86,-3591 }, {  87,-3591 },
 {  88,-3591 }, {  89,-3591 }, {  90,-3591 }, {  91,-3591 }, {  92,-3591 },
 {  93,-3591 }, {  94,-3591 }, {  95,-3591 }, {  96,-3591 }, {  97,-3591 },
 {  98,-3591 }, {  99,-3591 }, { 100,-3591 }, { 101,-3591 }, { 102,-3591 },
 { 103,-3591 }, { 104,-3591 }, { 105,-3591 }, { 106,-3591 }, { 107,-3591 },
 { 108,-3591 }, { 109,-3591 }, { 110,-3591 }, { 111,-3591 }, { 112,-3591 },
 { 113,-3591 }, { 114,-3591 }, { 115,-3591 }, { 116,-3591 }, { 117,-3591 },
 { 118,-3591 }, { 119,-3591 }, { 120,-3591 }, { 121,-3591 }, { 122,-3591 },
 { 123,-3591 }, { 124,-3591 }, { 125,-3591 }, { 126,-3591 }, { 127,-3591 },

 { 128,-3591 }, {   0,   1 }, {   0, 130 }, {   1,-3068 }, {   2,-3068 },
 {   3,-3068 }, {   4,-3068 }, {   5,-3068 }, {   6,-3068 }, {   7,-3068 },
 {   8,-3068 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-3068 }, {  15,-3068 }, {  16,-3068 }, {  17,-3068 },
 {  18,-3068 }, {  19,-3068 }, {  20,-3068 }, {  21,-3068 }, {  22,-3068 },
 {  23,-3068 }, {  24,-3068 }, {  25,-3068 }, {  26,-3068 }, {  27,-3068 },
 {  28,-3068 }, {  29,-3068 }, {  30,-3068 }, {  31,-3068 }, {   0,   0 },
 {  33,-3068 }, {  34,-3068 }, {  35,-3068 }, {  36,-3068 }, {  37,-3068 },
 {  38,-3068 }, {  39,-3068 }, {  40,-3068 }, {  41,-3068 }, {  42,-3068 },
 {  43,-3068 }, {  44,-3068 }, {  45,-3068 }, {  46,-3068 }, {  47,-3068 },

 {  48,-3068 }, {  49,-3068 }, {  50,-3068 }, {  51,-3068 }, {  52,-3068 },
 {  53,-3068 }, {  54,-3068 }, {  55,-3068 }, {  56,-3068 }, {  57,-3068 },
 {  58,-3068 }, {  59,-3068 }, {  60,-3068 }, {  61,-3068 }, {   0,   0 },
 {  63,-3068 }, {  64,-3068 }, {  65,-3068 }, {  66,-3068 }, {  67,-3068 },
 {  68,-3068 }, {  69,-3068 }, {  70,-3068 }, {  71,-3068 }, {  72,-3068 },
 {  73,-3068 }, {  74,-3068 }, {  75,-3068 }, {  76,-3068 }, {  77,-3068 },
 {  78,-3068 }, {  79,-3068 }, {  80,-3068 }, {  81,-3068 }, {  82,-3068 },
 {  83,-3068 }, {  84,-3068 }, {  85,-3068 }, {  86,-3068 }, {  87,-3068 },
 {  88,-3068 }, {  89,-3068 }, {  90,-3068 }, {  91,-3068 }, {  92,-3068 },
 {  93,-3068 }, {  94,-3068 }, {  95,-3068 }, {  96,-3068 }, {  97,-3068 },

 {  98,-3068 }, {  99,-3068 }, { 100,-3068 }, { 101,-3068 }, { 102,-3068 },
 { 103,-3068 }, { 104,-3068 }, { 105,-3068 }, { 106,-3068 }, { 107,-3068 },
 { 108,-3068 }, { 109,-3068 }, { 110,-3068 }, { 111,-3068 }, { 112,-3068 },
 { 113,-3068 }, { 114,-3068 }, { 115,-3068 }, { 116,-3068 }, { 117,-3068 },
 { 118,-3068 }, { 119,-3068 }, { 120,-3068 }, { 121,-3068 }, { 122,-3068 },
 { 123,-3068 }, { 124,-3068 }, { 125,-3068 }, { 126,-3068 }, { 127,-3068 },
 { 128,-3068 }, { 129,  12 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[11] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    &yy_transition[263],
    &yy_transition[393],
    &yy_transition[523],
    &yy_transition[653],
    &yy_transition[783],
    &yy_transition[913],
    &yy_transition[1043],
    &yy_transition[1173],


    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "seqscan.ll"
#define INITIAL 0
/*  Nigla - Logarithmic Sequence Alignments
    Copyright (C) 2005  Reed A. Cartwright

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#line 20 "seqscan.ll"
	#include "ngila.h"
	#include "seqparse.h"
	
	#define yylval seq_lval
	using namespace std;
	int nLine = 1;
#define YY_NO_UNPUT 1
#define aln 1

#define fsa 2

#define phy 3

#define nex 4

#line 1824 "/usr/home/reed/Projects/ngila/current/src/seqscan.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 43 "seqscan.ll"


#line 1981 "/usr/home/reed/Projects/ngila/current/src/seqscan.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos + 1;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "seqscan.ll"
{
	yyless(0);
	BEGIN(aln);
	return CLUSTAL;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "seqscan.ll"
{
	yyless(0);
	BEGIN(fsa);
	return FASTA;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "seqscan.ll"
{
	yyless(0);
	BEGIN(phy);
	return PHYLIP;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "seqscan.ll"
{
	yyless(0);
	BEGIN(nex);
	return NEXUS;
}
	YY_BREAK
case YY_STATE_EOF(fsa):
case YY_STATE_EOF(aln):
case YY_STATE_EOF(phy):
case YY_STATE_EOF(nex):
#line 69 "seqscan.ll"
{
	BEGIN(INITIAL);
	return ENDL;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "seqscan.ll"
{
	yylval.ch = yytext[0];
	return yytext[0];
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "seqscan.ll"
{
	yylval.n = atoi(yytext);
	return NUMBER;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "seqscan.ll"
{
	yylval.cs = strdup(yytext);
	return HWORD;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "seqscan.ll"
{
	yylval.cs = strdup(yytext);
	return WORD;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "seqscan.ll"
{
	// Skip space
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "seqscan.ll"
{
	nLine++;
	return ENDL;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 103 "seqscan.ll"
{
	yyterminate();	
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 107 "seqscan.ll"
ECHO;
	YY_BREAK
#line 2163 "/usr/home/reed/Projects/ngila/current/src/seqscan.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start_state_list[yy_start + YY_AT_BOL()];

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register int yy_c = 128;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 107 "seqscan.ll"


void seq_error(char *s)
{
	fprintf(stderr, "ALERT (line %d): %s: \"%s\".\n", nLine, s, yytext);
}
