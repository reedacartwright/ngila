#define yy_create_buffer seq__create_buffer
#define yy_delete_buffer seq__delete_buffer
#define yy_scan_buffer seq__scan_buffer
#define yy_scan_string seq__scan_string
#define yy_scan_bytes seq__scan_bytes
#define yy_flex_debug seq__flex_debug
#define yy_init_buffer seq__init_buffer
#define yy_flush_buffer seq__flush_buffer
#define yy_load_buffer_state seq__load_buffer_state
#define yy_switch_to_buffer seq__switch_to_buffer
#define yyin seq_in
#define yyleng seq_leng
#define yylex seq_lex
#define yyout seq_out
#define yyrestart seq_restart
#define yytext seq_text

#line 19 "seqscan.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef yyconst struct yy_trans_info *yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 10
#define YY_END_OF_BUFFER 11
struct yy_trans_info
	{
	short yy_verify;
	short yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[4189] =
    {
 {   0,   0 }, {   0,4061 }, {   0,   0 }, {   0,4059 }, {   1,1300 },
 {   2,1300 }, {   3,1300 }, {   4,1300 }, {   5,1300 }, {   6,1300 },
 {   7,1300 }, {   8,1300 }, {   9,1430 }, {  10,1310 }, {  11,1430 },
 {  12,1430 }, {  13,1430 }, {  14,1300 }, {  15,1300 }, {  16,1300 },
 {  17,1300 }, {  18,1300 }, {  19,1300 }, {  20,1300 }, {  21,1300 },
 {  22,1300 }, {  23,1300 }, {  24,1300 }, {  25,1300 }, {  26,1300 },
 {  27,1300 }, {  28,1300 }, {  29,1300 }, {  30,1300 }, {  31,1300 },
 {  32,1430 }, {  33,1300 }, {  34,1300 }, {  35,1489 }, {  36,1300 },
 {  37,1300 }, {  38,1300 }, {  39,1300 }, {  40,1300 }, {  41,1300 },
 {  42,1300 }, {  43,1300 }, {  44,1300 }, {  45,1300 }, {  46,1300 },

 {  47,1300 }, {  48,1619 }, {  49,1619 }, {  50,1619 }, {  51,1619 },
 {  52,1619 }, {  53,1619 }, {  54,1619 }, {  55,1619 }, {  56,1619 },
 {  57,1619 }, {  58,1300 }, {  59,1300 }, {  60,1300 }, {  61,1300 },
 {  62,1312 }, {  63,1300 }, {  64,1300 }, {  65,1300 }, {  66,1300 },
 {  67,1749 }, {  68,1300 }, {  69,1300 }, {  70,1300 }, {  71,1300 },
 {  72,1300 }, {  73,1300 }, {  74,1300 }, {  75,1300 }, {  76,1300 },
 {  77,1300 }, {  78,1300 }, {  79,1300 }, {  80,1300 }, {  81,1300 },
 {  82,1300 }, {  83,1300 }, {  84,1300 }, {  85,1300 }, {  86,1300 },
 {  87,1300 }, {  88,1300 }, {  89,1300 }, {  90,1300 }, {  91,1300 },
 {  92,1300 }, {  93,1300 }, {  94,1300 }, {  95,1300 }, {  96,1300 },

 {  97,1300 }, {  98,1300 }, {  99,1300 }, { 100,1300 }, { 101,1300 },
 { 102,1300 }, { 103,1300 }, { 104,1300 }, { 105,1300 }, { 106,1300 },
 { 107,1300 }, { 108,1300 }, { 109,1300 }, { 110,1300 }, { 111,1300 },
 { 112,1300 }, { 113,1300 }, { 114,1300 }, { 115,1300 }, { 116,1300 },
 { 117,1300 }, { 118,1300 }, { 119,1300 }, { 120,1300 }, { 121,1300 },
 { 122,1300 }, { 123,1300 }, { 124,1300 }, { 125,1300 }, { 126,1300 },
 { 127,1300 }, { 128,1300 }, {   0,   0 }, {   0,3929 }, {   1,1170 },
 {   2,1170 }, {   3,1170 }, {   4,1170 }, {   5,1170 }, {   6,1170 },
 {   7,1170 }, {   8,1170 }, {   9,1300 }, {  10,1180 }, {  11,1300 },
 {  12,1300 }, {  13,1300 }, {  14,1170 }, {  15,1170 }, {  16,1170 },

 {  17,1170 }, {  18,1170 }, {  19,1170 }, {  20,1170 }, {  21,1170 },
 {  22,1170 }, {  23,1170 }, {  24,1170 }, {  25,1170 }, {  26,1170 },
 {  27,1170 }, {  28,1170 }, {  29,1170 }, {  30,1170 }, {  31,1170 },
 {  32,1300 }, {  33,1170 }, {  34,1170 }, {  35,1359 }, {  36,1170 },
 {  37,1170 }, {  38,1170 }, {  39,1170 }, {  40,1170 }, {  41,1170 },
 {  42,1170 }, {  43,1170 }, {  44,1170 }, {  45,1170 }, {  46,1170 },
 {  47,1170 }, {  48,1489 }, {  49,1489 }, {  50,1489 }, {  51,1489 },
 {  52,1489 }, {  53,1489 }, {  54,1489 }, {  55,1489 }, {  56,1489 },
 {  57,1489 }, {  58,1170 }, {  59,1170 }, {  60,1170 }, {  61,1170 },
 {  62,1182 }, {  63,1170 }, {  64,1170 }, {  65,1170 }, {  66,1170 },

 {  67,1619 }, {  68,1170 }, {  69,1170 }, {  70,1170 }, {  71,1170 },
 {  72,1170 }, {  73,1170 }, {  74,1170 }, {  75,1170 }, {  76,1170 },
 {  77,1170 }, {  78,1170 }, {  79,1170 }, {  80,1170 }, {  81,1170 },
 {  82,1170 }, {  83,1170 }, {  84,1170 }, {  85,1170 }, {  86,1170 },
 {  87,1170 }, {  88,1170 }, {  89,1170 }, {  90,1170 }, {  91,1170 },
 {  92,1170 }, {  93,1170 }, {  94,1170 }, {  95,1170 }, {  96,1170 },
 {  97,1170 }, {  98,1170 }, {  99,1170 }, { 100,1170 }, { 101,1170 },
 { 102,1170 }, { 103,1170 }, { 104,1170 }, { 105,1170 }, { 106,1170 },
 { 107,1170 }, { 108,1170 }, { 109,1170 }, { 110,1170 }, { 111,1170 },
 { 112,1170 }, { 113,1170 }, { 114,1170 }, { 115,1170 }, { 116,1170 },

 { 117,1170 }, { 118,1170 }, { 119,1170 }, { 120,1170 }, { 121,1170 },
 { 122,1170 }, { 123,1170 }, { 124,1170 }, { 125,1170 }, { 126,1170 },
 { 127,1170 }, { 128,1170 }, {   0,   0 }, {   0,3799 }, {   1,1040 },
 {   2,1040 }, {   3,1040 }, {   4,1040 }, {   5,1040 }, {   6,1040 },
 {   7,1040 }, {   8,1040 }, {   9,1619 }, {  10,1050 }, {  11,1619 },
 {  12,1619 }, {  13,1619 }, {  14,1040 }, {  15,1040 }, {  16,1040 },
 {  17,1040 }, {  18,1040 }, {  19,1040 }, {  20,1040 }, {  21,1040 },
 {  22,1040 }, {  23,1040 }, {  24,1040 }, {  25,1040 }, {  26,1040 },
 {  27,1040 }, {  28,1040 }, {  29,1040 }, {  30,1040 }, {  31,1040 },
 {  32,1619 }, {  33,1040 }, {  34,1040 }, {  35,1040 }, {  36,1040 },

 {  37,1040 }, {  38,1040 }, {  39,1040 }, {  40,1040 }, {  41,1040 },
 {  42,1040 }, {  43,1040 }, {  44,1040 }, {  45,1040 }, {  46,1040 },
 {  47,1040 }, {  48,1040 }, {  49,1040 }, {  50,1040 }, {  51,1040 },
 {  52,1040 }, {  53,1040 }, {  54,1040 }, {  55,1040 }, {  56,1040 },
 {  57,1040 }, {  58,1040 }, {  59,1040 }, {  60,1040 }, {  61,1040 },
 {  62,1172 }, {  63,1040 }, {  64,1040 }, {  65,1040 }, {  66,1040 },
 {  67,1040 }, {  68,1040 }, {  69,1040 }, {  70,1040 }, {  71,1040 },
 {  72,1040 }, {  73,1040 }, {  74,1040 }, {  75,1040 }, {  76,1040 },
 {  77,1040 }, {  78,1040 }, {  79,1040 }, {  80,1040 }, {  81,1040 },
 {  82,1040 }, {  83,1040 }, {  84,1040 }, {  85,1040 }, {  86,1040 },

 {  87,1040 }, {  88,1040 }, {  89,1040 }, {  90,1040 }, {  91,1040 },
 {  92,1040 }, {  93,1040 }, {  94,1040 }, {  95,1040 }, {  96,1040 },
 {  97,1040 }, {  98,1040 }, {  99,1040 }, { 100,1040 }, { 101,1040 },
 { 102,1040 }, { 103,1040 }, { 104,1040 }, { 105,1040 }, { 106,1040 },
 { 107,1040 }, { 108,1040 }, { 109,1040 }, { 110,1040 }, { 111,1040 },
 { 112,1040 }, { 113,1040 }, { 114,1040 }, { 115,1040 }, { 116,1040 },
 { 117,1040 }, { 118,1040 }, { 119,1040 }, { 120,1040 }, { 121,1040 },
 { 122,1040 }, { 123,1040 }, { 124,1040 }, { 125,1040 }, { 126,1040 },
 { 127,1040 }, { 128,1040 }, {   0,   0 }, {   0,3669 }, {   1, 910 },
 {   2, 910 }, {   3, 910 }, {   4, 910 }, {   5, 910 }, {   6, 910 },

 {   7, 910 }, {   8, 910 }, {   9,1489 }, {  10, 920 }, {  11,1489 },
 {  12,1489 }, {  13,1489 }, {  14, 910 }, {  15, 910 }, {  16, 910 },
 {  17, 910 }, {  18, 910 }, {  19, 910 }, {  20, 910 }, {  21, 910 },
 {  22, 910 }, {  23, 910 }, {  24, 910 }, {  25, 910 }, {  26, 910 },
 {  27, 910 }, {  28, 910 }, {  29, 910 }, {  30, 910 }, {  31, 910 },
 {  32,1489 }, {  33, 910 }, {  34, 910 }, {  35, 910 }, {  36, 910 },
 {  37, 910 }, {  38, 910 }, {  39, 910 }, {  40, 910 }, {  41, 910 },
 {  42, 910 }, {  43, 910 }, {  44, 910 }, {  45, 910 }, {  46, 910 },
 {  47, 910 }, {  48, 910 }, {  49, 910 }, {  50, 910 }, {  51, 910 },
 {  52, 910 }, {  53, 910 }, {  54, 910 }, {  55, 910 }, {  56, 910 },

 {  57, 910 }, {  58, 910 }, {  59, 910 }, {  60, 910 }, {  61, 910 },
 {  62,1042 }, {  63, 910 }, {  64, 910 }, {  65, 910 }, {  66, 910 },
 {  67, 910 }, {  68, 910 }, {  69, 910 }, {  70, 910 }, {  71, 910 },
 {  72, 910 }, {  73, 910 }, {  74, 910 }, {  75, 910 }, {  76, 910 },
 {  77, 910 }, {  78, 910 }, {  79, 910 }, {  80, 910 }, {  81, 910 },
 {  82, 910 }, {  83, 910 }, {  84, 910 }, {  85, 910 }, {  86, 910 },
 {  87, 910 }, {  88, 910 }, {  89, 910 }, {  90, 910 }, {  91, 910 },
 {  92, 910 }, {  93, 910 }, {  94, 910 }, {  95, 910 }, {  96, 910 },
 {  97, 910 }, {  98, 910 }, {  99, 910 }, { 100, 910 }, { 101, 910 },
 { 102, 910 }, { 103, 910 }, { 104, 910 }, { 105, 910 }, { 106, 910 },

 { 107, 910 }, { 108, 910 }, { 109, 910 }, { 110, 910 }, { 111, 910 },
 { 112, 910 }, { 113, 910 }, { 114, 910 }, { 115, 910 }, { 116, 910 },
 { 117, 910 }, { 118, 910 }, { 119, 910 }, { 120, 910 }, { 121, 910 },
 { 122, 910 }, { 123, 910 }, { 124, 910 }, { 125, 910 }, { 126, 910 },
 { 127, 910 }, { 128, 910 }, {   0,   0 }, {   0,3539 }, {   1, 780 },
 {   2, 780 }, {   3, 780 }, {   4, 780 }, {   5, 780 }, {   6, 780 },
 {   7, 780 }, {   8, 780 }, {   9,1359 }, {  10, 790 }, {  11,1359 },
 {  12,1359 }, {  13,1359 }, {  14, 780 }, {  15, 780 }, {  16, 780 },
 {  17, 780 }, {  18, 780 }, {  19, 780 }, {  20, 780 }, {  21, 780 },
 {  22, 780 }, {  23, 780 }, {  24, 780 }, {  25, 780 }, {  26, 780 },

 {  27, 780 }, {  28, 780 }, {  29, 780 }, {  30, 780 }, {  31, 780 },
 {  32,1359 }, {  33, 780 }, {  34, 780 }, {  35, 780 }, {  36, 780 },
 {  37, 780 }, {  38, 780 }, {  39, 780 }, {  40, 780 }, {  41, 780 },
 {  42, 780 }, {  43, 780 }, {  44, 780 }, {  45, 780 }, {  46, 780 },
 {  47, 780 }, {  48, 780 }, {  49, 780 }, {  50, 780 }, {  51, 780 },
 {  52, 780 }, {  53, 780 }, {  54, 780 }, {  55, 780 }, {  56, 780 },
 {  57, 780 }, {  58, 780 }, {  59, 780 }, {  60, 780 }, {  61, 780 },
 {  62, 914 }, {  63, 780 }, {  64, 780 }, {  65, 780 }, {  66, 780 },
 {  67, 780 }, {  68, 780 }, {  69, 780 }, {  70, 780 }, {  71, 780 },
 {  72, 780 }, {  73, 780 }, {  74, 780 }, {  75, 780 }, {  76, 780 },

 {  77, 780 }, {  78, 780 }, {  79, 780 }, {  80, 780 }, {  81, 780 },
 {  82, 780 }, {  83, 780 }, {  84, 780 }, {  85, 780 }, {  86, 780 },
 {  87, 780 }, {  88, 780 }, {  89, 780 }, {  90, 780 }, {  91, 780 },
 {  92, 780 }, {  93, 780 }, {  94, 780 }, {  95, 780 }, {  96, 780 },
 {  97, 780 }, {  98, 780 }, {  99, 780 }, { 100, 780 }, { 101, 780 },
 { 102, 780 }, { 103, 780 }, { 104, 780 }, { 105, 780 }, { 106, 780 },
 { 107, 780 }, { 108, 780 }, { 109, 780 }, { 110, 780 }, { 111, 780 },
 { 112, 780 }, { 113, 780 }, { 114, 780 }, { 115, 780 }, { 116, 780 },
 { 117, 780 }, { 118, 780 }, { 119, 780 }, { 120, 780 }, { 121, 780 },
 { 122, 780 }, { 123, 780 }, { 124, 780 }, { 125, 780 }, { 126, 780 },

 { 127, 780 }, { 128, 780 }, {   0,   0 }, {   0,3409 }, {   1, 650 },
 {   2, 650 }, {   3, 650 }, {   4, 650 }, {   5, 650 }, {   6, 650 },
 {   7, 650 }, {   8, 650 }, {   9,1229 }, {  10, 660 }, {  11,1229 },
 {  12,1229 }, {  13,1229 }, {  14, 650 }, {  15, 650 }, {  16, 650 },
 {  17, 650 }, {  18, 650 }, {  19, 650 }, {  20, 650 }, {  21, 650 },
 {  22, 650 }, {  23, 650 }, {  24, 650 }, {  25, 650 }, {  26, 650 },
 {  27, 650 }, {  28, 650 }, {  29, 650 }, {  30, 650 }, {  31, 650 },
 {  32,1229 }, {  33, 650 }, {  34, 650 }, {  35, 650 }, {  36, 650 },
 {  37, 650 }, {  38, 650 }, {  39, 650 }, {  40, 650 }, {  41, 650 },
 {  42, 650 }, {  43, 650 }, {  44, 650 }, {  45, 650 }, {  46, 650 },

 {  47, 650 }, {  48, 650 }, {  49, 650 }, {  50, 650 }, {  51, 650 },
 {  52, 650 }, {  53, 650 }, {  54, 650 }, {  55, 650 }, {  56, 650 },
 {  57, 650 }, {  58, 650 }, {  59, 650 }, {  60, 650 }, {  61, 650 },
 {  62, 784 }, {  63, 650 }, {  64, 650 }, {  65, 650 }, {  66, 650 },
 {  67, 650 }, {  68, 650 }, {  69, 650 }, {  70, 650 }, {  71, 650 },
 {  72, 650 }, {  73, 650 }, {  74, 650 }, {  75, 650 }, {  76, 650 },
 {  77, 650 }, {  78, 650 }, {  79, 650 }, {  80, 650 }, {  81, 650 },
 {  82, 650 }, {  83, 650 }, {  84, 650 }, {  85, 650 }, {  86, 650 },
 {  87, 650 }, {  88, 650 }, {  89, 650 }, {  90, 650 }, {  91, 650 },
 {  92, 650 }, {  93, 650 }, {  94, 650 }, {  95, 650 }, {  96, 650 },

 {  97, 650 }, {  98, 650 }, {  99, 650 }, { 100, 650 }, { 101, 650 },
 { 102, 650 }, { 103, 650 }, { 104, 650 }, { 105, 650 }, { 106, 650 },
 { 107, 650 }, { 108, 650 }, { 109, 650 }, { 110, 650 }, { 111, 650 },
 { 112, 650 }, { 113, 650 }, { 114, 650 }, { 115, 650 }, { 116, 650 },
 { 117, 650 }, { 118, 650 }, { 119, 650 }, { 120, 650 }, { 121, 650 },
 { 122, 650 }, { 123, 650 }, { 124, 650 }, { 125, 650 }, { 126, 650 },
 { 127, 650 }, { 128, 650 }, {   0,   0 }, {   0,3279 }, {   1, 520 },
 {   2, 520 }, {   3, 520 }, {   4, 520 }, {   5, 520 }, {   6, 520 },
 {   7, 520 }, {   8, 520 }, {   9,1099 }, {  10, 530 }, {  11,1099 },
 {  12,1099 }, {  13,1099 }, {  14, 520 }, {  15, 520 }, {  16, 520 },

 {  17, 520 }, {  18, 520 }, {  19, 520 }, {  20, 520 }, {  21, 520 },
 {  22, 520 }, {  23, 520 }, {  24, 520 }, {  25, 520 }, {  26, 520 },
 {  27, 520 }, {  28, 520 }, {  29, 520 }, {  30, 520 }, {  31, 520 },
 {  32,1099 }, {  33, 520 }, {  34, 520 }, {  35, 520 }, {  36, 520 },
 {  37, 520 }, {  38, 520 }, {  39, 520 }, {  40, 520 }, {  41, 520 },
 {  42, 520 }, {  43, 520 }, {  44, 520 }, {  45, 520 }, {  46, 520 },
 {  47, 520 }, {  48,1118 }, {  49,1118 }, {  50,1118 }, {  51,1118 },
 {  52,1118 }, {  53,1118 }, {  54,1118 }, {  55,1118 }, {  56,1118 },
 {  57,1118 }, {  58, 520 }, {  59, 520 }, {  60, 520 }, {  61, 520 },
 {  62, 652 }, {  63, 520 }, {  64, 520 }, {  65, 520 }, {  66, 520 },

 {  67, 520 }, {  68, 520 }, {  69, 520 }, {  70, 520 }, {  71, 520 },
 {  72, 520 }, {  73, 520 }, {  74, 520 }, {  75, 520 }, {  76, 520 },
 {  77, 520 }, {  78, 520 }, {  79, 520 }, {  80, 520 }, {  81, 520 },
 {  82, 520 }, {  83, 520 }, {  84, 520 }, {  85, 520 }, {  86, 520 },
 {  87, 520 }, {  88, 520 }, {  89, 520 }, {  90, 520 }, {  91, 520 },
 {  92, 520 }, {  93, 520 }, {  94, 520 }, {  95, 520 }, {  96, 520 },
 {  97, 520 }, {  98, 520 }, {  99, 520 }, { 100, 520 }, { 101, 520 },
 { 102, 520 }, { 103, 520 }, { 104, 520 }, { 105, 520 }, { 106, 520 },
 { 107, 520 }, { 108, 520 }, { 109, 520 }, { 110, 520 }, { 111, 520 },
 { 112, 520 }, { 113, 520 }, { 114, 520 }, { 115, 520 }, { 116, 520 },

 { 117, 520 }, { 118, 520 }, { 119, 520 }, { 120, 520 }, { 121, 520 },
 { 122, 520 }, { 123, 520 }, { 124, 520 }, { 125, 520 }, { 126, 520 },
 { 127, 520 }, { 128, 520 }, {   0,   0 }, {   0,3149 }, {   1, 390 },
 {   2, 390 }, {   3, 390 }, {   4, 390 }, {   5, 390 }, {   6, 390 },
 {   7, 390 }, {   8, 390 }, {   9, 969 }, {  10, 400 }, {  11, 969 },
 {  12, 969 }, {  13, 969 }, {  14, 390 }, {  15, 390 }, {  16, 390 },
 {  17, 390 }, {  18, 390 }, {  19, 390 }, {  20, 390 }, {  21, 390 },
 {  22, 390 }, {  23, 390 }, {  24, 390 }, {  25, 390 }, {  26, 390 },
 {  27, 390 }, {  28, 390 }, {  29, 390 }, {  30, 390 }, {  31, 390 },
 {  32, 969 }, {  33, 390 }, {  34, 390 }, {  35, 390 }, {  36, 390 },

 {  37, 390 }, {  38, 390 }, {  39, 390 }, {  40, 390 }, {  41, 390 },
 {  42, 390 }, {  43, 390 }, {  44, 390 }, {  45, 390 }, {  46, 390 },
 {  47, 390 }, {  48, 988 }, {  49, 988 }, {  50, 988 }, {  51, 988 },
 {  52, 988 }, {  53, 988 }, {  54, 988 }, {  55, 988 }, {  56, 988 },
 {  57, 988 }, {  58, 390 }, {  59, 390 }, {  60, 390 }, {  61, 390 },
 {  62, 522 }, {  63, 390 }, {  64, 390 }, {  65, 390 }, {  66, 390 },
 {  67, 390 }, {  68, 390 }, {  69, 390 }, {  70, 390 }, {  71, 390 },
 {  72, 390 }, {  73, 390 }, {  74, 390 }, {  75, 390 }, {  76, 390 },
 {  77, 390 }, {  78, 390 }, {  79, 390 }, {  80, 390 }, {  81, 390 },
 {  82, 390 }, {  83, 390 }, {  84, 390 }, {  85, 390 }, {  86, 390 },

 {  87, 390 }, {  88, 390 }, {  89, 390 }, {  90, 390 }, {  91, 390 },
 {  92, 390 }, {  93, 390 }, {  94, 390 }, {  95, 390 }, {  96, 390 },
 {  97, 390 }, {  98, 390 }, {  99, 390 }, { 100, 390 }, { 101, 390 },
 { 102, 390 }, { 103, 390 }, { 104, 390 }, { 105, 390 }, { 106, 390 },
 { 107, 390 }, { 108, 390 }, { 109, 390 }, { 110, 390 }, { 111, 390 },
 { 112, 390 }, { 113, 390 }, { 114, 390 }, { 115, 390 }, { 116, 390 },
 { 117, 390 }, { 118, 390 }, { 119, 390 }, { 120, 390 }, { 121, 390 },
 { 122, 390 }, { 123, 390 }, { 124, 390 }, { 125, 390 }, { 126, 390 },
 { 127, 390 }, { 128, 390 }, {   0,   0 }, {   0,3019 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },

 {   7, 260 }, {   8, 260 }, {   9, 839 }, {  10, 270 }, {  11, 839 },
 {  12, 839 }, {  13, 839 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 839 }, {  33, 260 }, {  34, 260 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 260 }, {  41, 260 },
 {  42, 260 }, {  43, 260 }, {  44, 260 }, {  45, 260 }, {  46, 260 },
 {  47, 260 }, {  48, 858 }, {  49, 858 }, {  50, 858 }, {  51, 858 },
 {  52, 858 }, {  53, 858 }, {  54, 858 }, {  55, 858 }, {  56, 858 },

 {  57, 858 }, {  58, 260 }, {  59, 260 }, {  60, 260 }, {  61, 260 },
 {  62, 392 }, {  63, 260 }, {  64, 260 }, {  65, 260 }, {  66, 260 },
 {  67, 260 }, {  68, 260 }, {  69, 260 }, {  70, 260 }, {  71, 260 },
 {  72, 260 }, {  73, 260 }, {  74, 260 }, {  75, 260 }, {  76, 260 },
 {  77, 260 }, {  78, 260 }, {  79, 260 }, {  80, 260 }, {  81, 260 },
 {  82, 260 }, {  83, 260 }, {  84, 260 }, {  85, 260 }, {  86, 260 },
 {  87, 260 }, {  88, 260 }, {  89, 260 }, {  90, 260 }, {  91, 260 },
 {  92, 260 }, {  93, 260 }, {  94, 260 }, {  95, 260 }, {  96, 260 },
 {  97, 260 }, {  98, 260 }, {  99, 260 }, { 100, 260 }, { 101, 260 },
 { 102, 260 }, { 103, 260 }, { 104, 260 }, { 105, 260 }, { 106, 260 },

 { 107, 260 }, { 108, 260 }, { 109, 260 }, { 110, 260 }, { 111, 260 },
 { 112, 260 }, { 113, 260 }, { 114, 260 }, { 115, 260 }, { 116, 260 },
 { 117, 260 }, { 118, 260 }, { 119, 260 }, { 120, 260 }, { 121, 260 },
 { 122, 260 }, { 123, 260 }, { 124, 260 }, { 125, 260 }, { 126, 260 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,2889 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 709 }, {  10, 140 }, {  11, 709 },
 {  12, 709 }, {  13, 709 }, {  14, 130 }, {  15, 130 }, {  16, 130 },
 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },

 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 709 }, {  33, 130 }, {  34, 130 }, {  35, 130 }, {  36, 130 },
 {  37, 130 }, {  38, 130 }, {  39, 130 }, {  40, 130 }, {  41, 130 },
 {  42, 130 }, {  43, 130 }, {  44, 130 }, {  45, 130 }, {  46, 130 },
 {  47, 130 }, {  48, 728 }, {  49, 728 }, {  50, 728 }, {  51, 728 },
 {  52, 728 }, {  53, 728 }, {  54, 728 }, {  55, 728 }, {  56, 728 },
 {  57, 728 }, {  58, 130 }, {  59, 130 }, {  60, 130 }, {  61, 130 },
 {  62, 262 }, {  63, 130 }, {  64, 130 }, {  65, 130 }, {  66, 130 },
 {  67, 130 }, {  68, 130 }, {  69, 130 }, {  70, 130 }, {  71, 130 },
 {  72, 130 }, {  73, 130 }, {  74, 130 }, {  75, 130 }, {  76, 130 },

 {  77, 130 }, {  78, 130 }, {  79, 130 }, {  80, 130 }, {  81, 130 },
 {  82, 130 }, {  83, 130 }, {  84, 130 }, {  85, 130 }, {  86, 130 },
 {  87, 130 }, {  88, 130 }, {  89, 130 }, {  90, 130 }, {  91, 130 },
 {  92, 130 }, {  93, 130 }, {  94, 130 }, {  95, 130 }, {  96, 130 },
 {  97, 130 }, {  98, 130 }, {  99, 130 }, { 100, 130 }, { 101, 130 },
 { 102, 130 }, { 103, 130 }, { 104, 130 }, { 105, 130 }, { 106, 130 },
 { 107, 130 }, { 108, 130 }, { 109, 130 }, { 110, 130 }, { 111, 130 },
 { 112, 130 }, { 113, 130 }, { 114, 130 }, { 115, 130 }, { 116, 130 },
 { 117, 130 }, { 118, 130 }, { 119, 130 }, { 120, 130 }, { 121, 130 },
 { 122, 130 }, { 123, 130 }, { 124, 130 }, { 125, 130 }, { 126, 130 },

 { 127, 130 }, { 128, 130 }, {   0,   7 }, {   0,2759 }, {   1, 728 },
 {   2, 728 }, {   3, 728 }, {   4, 728 }, {   5, 728 }, {   6, 728 },
 {   7, 728 }, {   8, 728 }, {   0,   9 }, {   0,2749 }, {   0,   2 },
 {   0,2747 }, {   0,   0 }, {  14, 728 }, {  15, 728 }, {  16, 728 },
 {  17, 728 }, {  18, 728 }, {  19, 728 }, {  20, 728 }, {  21, 728 },
 {  22, 728 }, {  23, 728 }, {  24, 728 }, {  25, 728 }, {  26, 728 },
 {  27, 728 }, {  28, 728 }, {  29, 728 }, {  30, 728 }, {  31, 728 },
 {   0,   0 }, {  33, 728 }, {  34, 728 }, {  35, 728 }, {  36, 728 },
 {  37, 728 }, {  38, 728 }, {  39, 728 }, {  40, 728 }, {  41, 728 },
 {  42, 728 }, {  43, 728 }, {  44, 728 }, {  45, 728 }, {  46, 728 },

 {  47, 728 }, {  48, 728 }, {  49, 728 }, {  50, 728 }, {  51, 728 },
 {  52, 728 }, {  53, 728 }, {  54, 728 }, {  55, 728 }, {  56, 728 },
 {  57, 728 }, {  58, 728 }, {  59, 728 }, {  60, 728 }, {  61, 728 },
 {   0,   0 }, {  63, 728 }, {  64, 728 }, {  65, 728 }, {  66, 728 },
 {  67, 728 }, {  68, 728 }, {  69, 728 }, {  70, 728 }, {  71, 728 },
 {  72, 728 }, {  73, 728 }, {  74, 728 }, {  75, 728 }, {  76, 728 },
 {  77, 728 }, {  78, 728 }, {  79, 728 }, {  80, 728 }, {  81, 728 },
 {  82, 728 }, {  83, 728 }, {  84, 728 }, {  85, 728 }, {  86, 728 },
 {  87, 728 }, {  88, 728 }, {  89, 728 }, {  90, 728 }, {  91, 728 },
 {  92, 728 }, {  93, 728 }, {  94, 728 }, {  95, 728 }, {  96, 728 },

 {  97, 728 }, {  98, 728 }, {  99, 728 }, { 100, 728 }, { 101, 728 },
 { 102, 728 }, { 103, 728 }, { 104, 728 }, { 105, 728 }, { 106, 728 },
 { 107, 728 }, { 108, 728 }, { 109, 728 }, { 110, 728 }, { 111, 728 },
 { 112, 728 }, { 113, 728 }, { 114, 728 }, { 115, 728 }, { 116, 728 },
 { 117, 728 }, { 118, 728 }, { 119, 728 }, { 120, 728 }, { 121, 728 },
 { 122, 728 }, { 123, 728 }, { 124, 728 }, { 125, 728 }, { 126, 728 },
 { 127, 728 }, { 128, 728 }, {   0,   8 }, {   0,2629 }, {   0,  10 },
 {   0,2627 }, {   0,   5 }, {   0,2625 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9, 728 }, {   0,   0 }, {  11, 728 },
 {  12, 728 }, {  13, 728 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32, 728 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48, 743 }, {  49, 743 }, {  50, 743 }, {  51, 743 },
 {  52, 743 }, {  53, 743 }, {  54, 743 }, {  55, 743 }, {  56, 743 },
 {  57, 743 }, {   0,   7 }, {   0,2570 }, {   1, 539 }, {   2, 539 },
 {   3, 539 }, {   4, 539 }, {   5, 539 }, {   6, 539 }, {   7, 539 },

 {   8, 539 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14, 539 }, {  15, 539 }, {  16, 539 }, {  17, 539 },
 {  18, 539 }, {  19, 539 }, {  20, 539 }, {  21, 539 }, {  22, 539 },
 {  23, 539 }, {  24, 539 }, {  25, 539 }, {  26, 539 }, {  27, 539 },
 {  28, 539 }, {  29, 539 }, {  30, 539 }, {  31, 539 }, {   0,   0 },
 {  33, 539 }, {  34, 539 }, {  35, 539 }, {  36, 539 }, {  37, 539 },
 {  38, 539 }, {  39, 539 }, {  40, 539 }, {  41, 539 }, {  42, 539 },
 {  43, 539 }, {  44, 539 }, {  45, 539 }, {  46, 539 }, {  47, 539 },
 {  48, 539 }, {  49, 539 }, {  50, 539 }, {  51, 539 }, {  52, 539 },
 {  53, 539 }, {  54, 539 }, {  55, 539 }, {  56, 539 }, {  57, 539 },

 {  58, 539 }, {  59, 539 }, {  60, 539 }, {  61, 539 }, {   0,   0 },
 {  63, 539 }, {  64, 539 }, {  65, 539 }, {  66, 539 }, {  67, 539 },
 {  68, 539 }, {  69, 539 }, {  70, 539 }, {  71, 539 }, {  72, 539 },
 {  73, 539 }, {  74, 539 }, {  75, 539 }, {  76, 539 }, {  77, 539 },
 {  78, 743 }, {  79, 539 }, {  80, 539 }, {  81, 539 }, {  82, 539 },
 {  83, 539 }, {  84, 539 }, {  85, 539 }, {  86, 539 }, {  87, 539 },
 {  88, 539 }, {  89, 539 }, {  90, 539 }, {  91, 539 }, {  92, 539 },
 {  93, 539 }, {  94, 539 }, {  95, 539 }, {  96, 539 }, {  97, 539 },
 {  98, 539 }, {  99, 539 }, { 100, 539 }, { 101, 539 }, { 102, 539 },
 { 103, 539 }, { 104, 539 }, { 105, 539 }, { 106, 539 }, { 107, 539 },

 { 108, 539 }, { 109, 539 }, { 110, 539 }, { 111, 539 }, { 112, 539 },
 { 113, 539 }, { 114, 539 }, { 115, 539 }, { 116, 539 }, { 117, 539 },
 { 118, 539 }, { 119, 539 }, { 120, 539 }, { 121, 539 }, { 122, 539 },
 { 123, 539 }, { 124, 539 }, { 125, 539 }, { 126, 539 }, { 127, 539 },
 { 128, 539 }, {   0,   7 }, {   0,2440 }, {   1, 409 }, {   2, 409 },
 {   3, 409 }, {   4, 409 }, {   5, 409 }, {   6, 409 }, {   7, 409 },
 {   8, 409 }, {   9, 743 }, {   0,   0 }, {  11, 743 }, {  12, 743 },
 {  13, 743 }, {  14, 409 }, {  15, 409 }, {  16, 409 }, {  17, 409 },
 {  18, 409 }, {  19, 409 }, {  20, 409 }, {  21, 409 }, {  22, 409 },
 {  23, 409 }, {  24, 409 }, {  25, 409 }, {  26, 409 }, {  27, 409 },

 {  28, 409 }, {  29, 409 }, {  30, 409 }, {  31, 409 }, {  32, 743 },
 {  33, 409 }, {  34, 409 }, {  35, 409 }, {  36, 409 }, {  37, 409 },
 {  38, 409 }, {  39, 409 }, {  40, 409 }, {  41, 409 }, {  42, 409 },
 {  43, 409 }, {  44, 409 }, {  45, 409 }, {  46, 409 }, {  47, 409 },
 {  48, 802 }, {  49, 802 }, {  50, 802 }, {  51, 802 }, {  52, 802 },
 {  53, 802 }, {  54, 802 }, {  55, 802 }, {  56, 802 }, {  57, 802 },
 {  58, 409 }, {  59, 409 }, {  60, 409 }, {  61, 409 }, {   0,   0 },
 {  63, 409 }, {  64, 409 }, {  65, 409 }, {  66, 409 }, {  67, 409 },
 {  68, 409 }, {  69, 409 }, {  70, 409 }, {  71, 409 }, {  72, 409 },
 {  73, 409 }, {  74, 409 }, {  75, 409 }, {  76, 409 }, {  77, 409 },

 {  78, 409 }, {  79, 409 }, {  80, 409 }, {  81, 409 }, {  82, 409 },
 {  83, 409 }, {  84, 409 }, {  85, 409 }, {  86, 409 }, {  87, 409 },
 {  88, 409 }, {  89, 409 }, {  90, 409 }, {  91, 409 }, {  92, 409 },
 {  93, 409 }, {  94, 409 }, {  95, 409 }, {  96, 409 }, {  97, 409 },
 {  98, 409 }, {  99, 409 }, { 100, 409 }, { 101, 409 }, { 102, 409 },
 { 103, 409 }, { 104, 409 }, { 105, 409 }, { 106, 409 }, { 107, 409 },
 { 108, 409 }, { 109, 409 }, { 110, 409 }, { 111, 409 }, { 112, 409 },
 { 113, 409 }, { 114, 409 }, { 115, 409 }, { 116, 409 }, { 117, 409 },
 { 118, 409 }, { 119, 409 }, { 120, 409 }, { 121, 409 }, { 122, 409 },
 { 123, 409 }, { 124, 409 }, { 125, 409 }, { 126, 409 }, { 127, 409 },

 { 128, 409 }, {   0,   7 }, {   0,2310 }, {   1, 279 }, {   2, 279 },
 {   3, 279 }, {   4, 279 }, {   5, 279 }, {   6, 279 }, {   7, 279 },
 {   8, 279 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14, 279 }, {  15, 279 }, {  16, 279 }, {  17, 279 },
 {  18, 279 }, {  19, 279 }, {  20, 279 }, {  21, 279 }, {  22, 279 },
 {  23, 279 }, {  24, 279 }, {  25, 279 }, {  26, 279 }, {  27, 279 },
 {  28, 279 }, {  29, 279 }, {  30, 279 }, {  31, 279 }, {   0,   0 },
 {  33, 279 }, {  34, 279 }, {  35, 279 }, {  36, 279 }, {  37, 279 },
 {  38, 279 }, {  39, 279 }, {  40, 279 }, {  41, 279 }, {  42, 279 },
 {  43, 279 }, {  44, 279 }, {  45, 279 }, {  46, 279 }, {  47, 279 },

 {  48, 279 }, {  49, 279 }, {  50, 279 }, {  51, 279 }, {  52, 279 },
 {  53, 279 }, {  54, 279 }, {  55, 279 }, {  56, 279 }, {  57, 279 },
 {  58, 279 }, {  59, 279 }, {  60, 279 }, {  61, 279 }, {   0,   0 },
 {  63, 279 }, {  64, 279 }, {  65, 279 }, {  66, 279 }, {  67, 279 },
 {  68, 279 }, {  69, 279 }, {  70, 279 }, {  71, 279 }, {  72, 279 },
 {  73, 279 }, {  74, 279 }, {  75, 279 }, {  76, 802 }, {  77, 279 },
 {  78, 279 }, {  79, 279 }, {  80, 279 }, {  81, 279 }, {  82, 279 },
 {  83, 279 }, {  84, 279 }, {  85, 279 }, {  86, 279 }, {  87, 279 },
 {  88, 279 }, {  89, 279 }, {  90, 279 }, {  91, 279 }, {  92, 279 },
 {  93, 279 }, {  94, 279 }, {  95, 279 }, {  96, 279 }, {  97, 279 },

 {  98, 279 }, {  99, 279 }, { 100, 279 }, { 101, 279 }, { 102, 279 },
 { 103, 279 }, { 104, 279 }, { 105, 279 }, { 106, 279 }, { 107, 279 },
 { 108, 279 }, { 109, 279 }, { 110, 279 }, { 111, 279 }, { 112, 279 },
 { 113, 279 }, { 114, 279 }, { 115, 279 }, { 116, 279 }, { 117, 279 },
 { 118, 279 }, { 119, 279 }, { 120, 279 }, { 121, 279 }, { 122, 279 },
 { 123, 279 }, { 124, 279 }, { 125, 279 }, { 126, 279 }, { 127, 279 },
 { 128, 279 }, {   0,   8 }, {   0,2180 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9, 802 }, {   0,   0 }, {  11, 802 }, {  12, 802 },
 {  13, 802 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   6 }, {   0,2161 }, {   1, 130 }, {   2, 130 }, {   3, 130 },
 {   4, 130 }, {   5, 130 }, {   6, 130 }, {   7, 130 }, {   8, 130 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 802 },
 {  14, 130 }, {  15, 130 }, {  16, 130 }, {  17, 130 }, {  18, 130 },
 {  19, 130 }, {  20, 130 }, {  21, 130 }, {  22, 130 }, {  23, 130 },
 {  24, 130 }, {  25, 130 }, {  26, 130 }, {  27, 130 }, {  28, 130 },
 {  29, 130 }, {  30, 130 }, {  31, 130 }, {   0,   0 }, {  33, 130 },
 {  34, 130 }, {  35, 130 }, {  36, 130 }, {  37, 130 }, {  38, 130 },
 {  39, 130 }, {  40, 130 }, {  41, 130 }, {  42, 130 }, {  43, 130 },
 {  44, 130 }, {  45, 130 }, {  46, 130 }, {  47, 130 }, {  48, 802 },

 {  49, 802 }, {  50, 802 }, {  51, 802 }, {  52, 802 }, {  53, 802 },
 {  54, 802 }, {  55, 802 }, {  56, 802 }, {  57, 802 }, {  58, 130 },
 {  59, 130 }, {  60, 130 }, {  61, 130 }, {   0,   0 }, {  63, 130 },
 {  64, 130 }, {  65, 130 }, {  66, 130 }, {  67, 130 }, {  68, 130 },
 {  69, 130 }, {  70, 130 }, {  71, 130 }, {  72, 130 }, {  73, 130 },
 {  74, 130 }, {  75, 130 }, {  76, 130 }, {  77, 130 }, {  78, 130 },
 {  79, 130 }, {  80, 130 }, {  81, 130 }, {  82, 130 }, {  83, 130 },
 {  84, 130 }, {  85, 130 }, {  86, 130 }, {  87, 130 }, {  88, 130 },
 {  89, 130 }, {  90, 130 }, {  91, 130 }, {  92, 130 }, {  93, 130 },
 {  94, 130 }, {  95, 130 }, {  96, 130 }, {  97, 130 }, {  98, 130 },

 {  99, 130 }, { 100, 130 }, { 101, 130 }, { 102, 130 }, { 103, 130 },
 { 104, 130 }, { 105, 130 }, { 106, 130 }, { 107, 130 }, { 108, 130 },
 { 109, 130 }, { 110, 130 }, { 111, 130 }, { 112, 130 }, { 113, 130 },
 { 114, 130 }, { 115, 130 }, { 116, 130 }, { 117, 130 }, { 118, 130 },
 { 119, 130 }, { 120, 130 }, { 121, 130 }, { 122, 130 }, { 123, 130 },
 { 124, 130 }, { 125, 130 }, { 126, 130 }, { 127, 130 }, { 128, 130 },
 {   0,   7 }, {   0,2031 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },

 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {   0,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },

 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },

 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,   8 }, {   0,1901 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {   0,   0 }, {   0,1886 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9, 189 }, {   0,   0 }, {  11, 189 }, {  12, 189 }, {  13, 189 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 189 }, {  48,  15 },
 {  49,  15 }, {  50,  15 }, {  51,  15 }, {  52,  15 }, {  53,  15 },
 {  54,  15 }, {  55,  15 }, {  56,  15 }, {  57,  15 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   7 },
 {   0,1827 }, {   1,-204 }, {   2,-204 }, {   3,-204 }, {   4,-204 },
 {   5,-204 }, {   6,-204 }, {   7,-204 }, {   8,-204 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-204 },

 {  15,-204 }, {  16,-204 }, {  17,-204 }, {  18,-204 }, {  19,-204 },
 {  20,-204 }, {  21,-204 }, {  22,-204 }, {  23,-204 }, {  24,-204 },
 {  25,-204 }, {  26,-204 }, {  27,-204 }, {  28,-204 }, {  29,-204 },
 {  30,-204 }, {  31,-204 }, {   0,   0 }, {  33,-204 }, {  34,-204 },
 {  35,-204 }, {  36,-204 }, {  37,-204 }, {  38,-204 }, {  39,-204 },
 {  40,-204 }, {  41,-204 }, {  42,-204 }, {  43,-204 }, {  44,-204 },
 {  45,-204 }, {  46,-204 }, {  47,-204 }, {  48,-204 }, {  49,-204 },
 {  50,-204 }, {  51,-204 }, {  52,-204 }, {  53,-204 }, {  54,-204 },
 {  55,-204 }, {  56,-204 }, {  57,-204 }, {  58,-204 }, {  59,-204 },
 {  60,-204 }, {  61,-204 }, {   0,   0 }, {  63,-204 }, {  64,-204 },

 {  65,-204 }, {  66,-204 }, {  67,-204 }, {  68,-204 }, {  69, 598 },
 {  70,-204 }, {  71,-204 }, {  72,-204 }, {  73,-204 }, {  74,-204 },
 {  75,-204 }, {  76,-204 }, {  77,-204 }, {  78,-204 }, {  79,-204 },
 {  80,-204 }, {  81,-204 }, {  82,-204 }, {  83,-204 }, {  84,-204 },
 {  85,-204 }, {  86,-204 }, {  87,-204 }, {  88,-204 }, {  89,-204 },
 {  90,-204 }, {  91,-204 }, {  92,-204 }, {  93,-204 }, {  94,-204 },
 {  95,-204 }, {  96,-204 }, {  97,-204 }, {  98,-204 }, {  99,-204 },
 { 100,-204 }, { 101,-204 }, { 102,-204 }, { 103,-204 }, { 104,-204 },
 { 105,-204 }, { 106,-204 }, { 107,-204 }, { 108,-204 }, { 109,-204 },
 { 110,-204 }, { 111,-204 }, { 112,-204 }, { 113,-204 }, { 114,-204 },

 { 115,-204 }, { 116,-204 }, { 117,-204 }, { 118,-204 }, { 119,-204 },
 { 120,-204 }, { 121,-204 }, { 122,-204 }, { 123,-204 }, { 124,-204 },
 { 125,-204 }, { 126,-204 }, { 127,-204 }, { 128,-204 }, {   0,   0 },
 {   0,1697 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 598 }, {  49, 598 },
 {  50, 598 }, {  51, 598 }, {  52, 598 }, {  53, 598 }, {  54, 598 },
 {  55, 598 }, {  56, 598 }, {  57, 598 }, {   0,   7 }, {   0,1638 },
 {   1,-393 }, {   2,-393 }, {   3,-393 }, {   4,-393 }, {   5,-393 },
 {   6,-393 }, {   7,-393 }, {   8,-393 }, {   9, -59 }, {   0,   0 },
 {  11, -59 }, {  12, -59 }, {  13, -59 }, {  14,-393 }, {  15,-393 },
 {  16,-393 }, {  17,-393 }, {  18,-393 }, {  19,-393 }, {  20,-393 },
 {  21,-393 }, {  22,-393 }, {  23,-393 }, {  24,-393 }, {  25,-393 },

 {  26,-393 }, {  27,-393 }, {  28,-393 }, {  29,-393 }, {  30,-393 },
 {  31,-393 }, {  32, -59 }, {  33,-393 }, {  34,-393 }, {  35,-393 },
 {  36,-393 }, {  37,-393 }, {  38,-393 }, {  39,-393 }, {  40,-393 },
 {  41,-393 }, {  42,-393 }, {  43,-393 }, {  44,-393 }, {  45,-393 },
 {  46,-393 }, {  47,-393 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,-393 }, {  59,-393 }, {  60,-393 },
 {  61,-393 }, {   0,   0 }, {  63,-393 }, {  64,-393 }, {  65,-393 },
 {  66,-393 }, {  67,-393 }, {  68,-393 }, {  69,-393 }, {  70,-393 },
 {  71,-393 }, {  72,-393 }, {  73,-393 }, {  74,-393 }, {  75,-393 },

 {  76,-393 }, {  77,-393 }, {  78,-393 }, {  79,-393 }, {  80,-393 },
 {  81,-393 }, {  82,-393 }, {  83,-393 }, {  84,-393 }, {  85,-393 },
 {  86,-393 }, {  87,-393 }, {  88,-393 }, {  89,-393 }, {  90,-393 },
 {  91,-393 }, {  92,-393 }, {  93,-393 }, {  94,-393 }, {  95,-393 },
 {  96,-393 }, {  97,-393 }, {  98,-393 }, {  99,-393 }, { 100,-393 },
 { 101,-393 }, { 102,-393 }, { 103,-393 }, { 104,-393 }, { 105,-393 },
 { 106,-393 }, { 107,-393 }, { 108,-393 }, { 109,-393 }, { 110,-393 },
 { 111,-393 }, { 112,-393 }, { 113,-393 }, { 114,-393 }, { 115,-393 },
 { 116,-393 }, { 117,-393 }, { 118,-393 }, { 119,-393 }, { 120,-393 },
 { 121,-393 }, { 122,-393 }, { 123,-393 }, { 124,-393 }, { 125,-393 },

 { 126,-393 }, { 127,-393 }, { 128,-393 }, {   0,   7 }, {   0,1508 },
 {   1,-523 }, {   2,-523 }, {   3,-523 }, {   4,-523 }, {   5,-523 },
 {   6,-523 }, {   7,-523 }, {   8,-523 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  14,-523 }, {  15,-523 },
 {  16,-523 }, {  17,-523 }, {  18,-523 }, {  19,-523 }, {  20,-523 },
 {  21,-523 }, {  22,-523 }, {  23,-523 }, {  24,-523 }, {  25,-523 },
 {  26,-523 }, {  27,-523 }, {  28,-523 }, {  29,-523 }, {  30,-523 },
 {  31,-523 }, {   0,   0 }, {  33,-523 }, {  34,-523 }, {  35,-523 },
 {  36,-523 }, {  37,-523 }, {  38,-523 }, {  39,-523 }, {  40,-523 },
 {  41,-523 }, {  42,-523 }, {  43,-523 }, {  44,-523 }, {  45,-523 },

 {  46,-523 }, {  47,-523 }, {  48,-523 }, {  49,-523 }, {  50,-523 },
 {  51,-523 }, {  52,-523 }, {  53,-523 }, {  54,-523 }, {  55,-523 },
 {  56,-523 }, {  57,-523 }, {  58,-523 }, {  59,-523 }, {  60,-523 },
 {  61,-523 }, {   0,   0 }, {  63,-523 }, {  64,-523 }, {  65,-523 },
 {  66,-523 }, {  67,-523 }, {  68,-523 }, {  69,-523 }, {  70,-523 },
 {  71,-523 }, {  72,-523 }, {  73,-523 }, {  74,-523 }, {  75,-523 },
 {  76,-523 }, {  77,-523 }, {  78,-523 }, {  79,-523 }, {  80,-523 },
 {  81,-523 }, {  82,-523 }, {  83,-523 }, {  84,-523 }, {  85, 468 },
 {  86,-523 }, {  87,-523 }, {  88,-523 }, {  89,-523 }, {  90,-523 },
 {  91,-523 }, {  92,-523 }, {  93,-523 }, {  94,-523 }, {  95,-523 },

 {  96,-523 }, {  97,-523 }, {  98,-523 }, {  99,-523 }, { 100,-523 },
 { 101,-523 }, { 102,-523 }, { 103,-523 }, { 104,-523 }, { 105,-523 },
 { 106,-523 }, { 107,-523 }, { 108,-523 }, { 109,-523 }, { 110,-523 },
 { 111,-523 }, { 112,-523 }, { 113,-523 }, { 114,-523 }, { 115,-523 },
 { 116,-523 }, { 117,-523 }, { 118,-523 }, { 119,-523 }, { 120,-523 },
 { 121,-523 }, { 122,-523 }, { 123,-523 }, { 124,-523 }, { 125,-523 },
 { 126,-523 }, { 127,-523 }, { 128,-523 }, {   0,   8 }, {   0,1378 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   6 }, {   0,1359 }, {   1,-672 },
 {   2,-672 }, {   3,-672 }, {   4,-672 }, {   5,-672 }, {   6,-672 },
 {   7,-672 }, {   8,-672 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {  14,-672 }, {  15,-672 }, {  16,-672 },
 {  17,-672 }, {  18,-672 }, {  19,-672 }, {  20,-672 }, {  21,-672 },
 {  22,-672 }, {  23,-672 }, {  24,-672 }, {  25,-672 }, {  26,-672 },
 {  27,-672 }, {  28,-672 }, {  29,-672 }, {  30,-672 }, {  31,-672 },
 {   0,   0 }, {  33,-672 }, {  34,-672 }, {  35,-672 }, {  36,-672 },
 {  37,-672 }, {  38,-672 }, {  39,-672 }, {  40,-672 }, {  41,-672 },
 {  42,-672 }, {  43,-672 }, {  44,-672 }, {  45,-672 }, {  46,-672 },

 {  47,-672 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,-672 }, {  59,-672 }, {  60,-672 }, {  61,-672 },
 {   0,   0 }, {  63,-672 }, {  64,-672 }, {  65,-672 }, {  66,-672 },
 {  67,-672 }, {  68,-672 }, {  69,-672 }, {  70,-672 }, {  71,-672 },
 {  72,-672 }, {  73,-672 }, {  74,-672 }, {  75,-672 }, {  76,-672 },
 {  77,-672 }, {  78,-672 }, {  79,-672 }, {  80,-672 }, {  81,-672 },
 {  82,-672 }, {  83,-672 }, {  84,-672 }, {  85,-672 }, {  86,-672 },
 {  87,-672 }, {  88,-672 }, {  89,-672 }, {  90,-672 }, {  91,-672 },
 {  92,-672 }, {  93,-672 }, {  94,-672 }, {  95,-672 }, {  96,-672 },

 {  97,-672 }, {  98,-672 }, {  99,-672 }, { 100,-672 }, { 101,-672 },
 { 102,-672 }, { 103,-672 }, { 104,-672 }, { 105,-672 }, { 106,-672 },
 { 107,-672 }, { 108,-672 }, { 109,-672 }, { 110,-672 }, { 111,-672 },
 { 112,-672 }, { 113,-672 }, { 114,-672 }, { 115,-672 }, { 116,-672 },
 { 117,-672 }, { 118,-672 }, { 119,-672 }, { 120,-672 }, { 121,-672 },
 { 122,-672 }, { 123,-672 }, { 124,-672 }, { 125,-672 }, { 126,-672 },
 { 127,-672 }, { 128,-672 }, {   0,   7 }, {   0,1229 }, {   1,-802 },
 {   2,-802 }, {   3,-802 }, {   4,-802 }, {   5,-802 }, {   6,-802 },
 {   7,-802 }, {   8,-802 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  14,-802 }, {  15,-802 }, {  16,-802 },

 {  17,-802 }, {  18,-802 }, {  19,-802 }, {  20,-802 }, {  21,-802 },
 {  22,-802 }, {  23,-802 }, {  24,-802 }, {  25,-802 }, {  26,-802 },
 {  27,-802 }, {  28,-802 }, {  29,-802 }, {  30,-802 }, {  31,-802 },
 {   0,   0 }, {  33,-802 }, {  34,-802 }, {  35,-802 }, {  36,-802 },
 {  37,-802 }, {  38,-802 }, {  39,-802 }, {  40,-802 }, {  41,-802 },
 {  42,-802 }, {  43,-802 }, {  44,-802 }, {  45,-802 }, {  46,-802 },
 {  47,-802 }, {  48,-802 }, {  49,-802 }, {  50,-802 }, {  51,-802 },
 {  52,-802 }, {  53,-802 }, {  54,-802 }, {  55,-802 }, {  56,-802 },
 {  57,-802 }, {  58,-802 }, {  59,-802 }, {  60,-802 }, {  61,-802 },
 {   0,   0 }, {  63,-802 }, {  64,-802 }, {  65,-802 }, {  66,-802 },

 {  67,-802 }, {  68,-802 }, {  69,-802 }, {  70,-802 }, {  71,-802 },
 {  72,-802 }, {  73,-802 }, {  74,-802 }, {  75,-802 }, {  76,-802 },
 {  77,-802 }, {  78,-802 }, {  79,-802 }, {  80,-802 }, {  81,-802 },
 {  82,-802 }, {  83,-802 }, {  84,-802 }, {  85,-802 }, {  86,-802 },
 {  87,-802 }, {  88, 319 }, {  89,-802 }, {  90,-802 }, {  91,-802 },
 {  92,-802 }, {  93,-802 }, {  94,-802 }, {  95,-802 }, {  96,-802 },
 {  97,-802 }, {  98,-802 }, {  99,-802 }, { 100,-802 }, { 101,-802 },
 { 102,-802 }, { 103,-802 }, { 104,-802 }, { 105,-802 }, { 106,-802 },
 { 107,-802 }, { 108,-802 }, { 109,-802 }, { 110,-802 }, { 111,-802 },
 { 112,-802 }, { 113,-802 }, { 114,-802 }, { 115,-802 }, { 116,-802 },

 { 117,-802 }, { 118,-802 }, { 119,-802 }, { 120,-802 }, { 121,-802 },
 { 122,-802 }, { 123,-802 }, { 124,-802 }, { 125,-802 }, { 126,-802 },
 { 127,-802 }, { 128,-802 }, {   0,   3 }, {   0,1099 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   7 }, {   0,1040 }, {   1,-991 }, {   2,-991 },
 {   3,-991 }, {   4,-991 }, {   5,-991 }, {   6,-991 }, {   7,-991 },
 {   8,-991 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-991 }, {  15,-991 }, {  16,-991 }, {  17,-991 },
 {  18,-991 }, {  19,-991 }, {  20,-991 }, {  21,-991 }, {  22,-991 },
 {  23,-991 }, {  24,-991 }, {  25,-991 }, {  26,-991 }, {  27,-991 },

 {  28,-991 }, {  29,-991 }, {  30,-991 }, {  31,-991 }, {   0,   0 },
 {  33,-991 }, {  34,-991 }, {  35,-991 }, {  36,-991 }, {  37,-991 },
 {  38,-991 }, {  39,-991 }, {  40,-991 }, {  41,-991 }, {  42,-991 },
 {  43,-991 }, {  44,-991 }, {  45,-991 }, {  46,-991 }, {  47,-991 },
 {  48,-991 }, {  49,-991 }, {  50,-991 }, {  51,-991 }, {  52,-991 },
 {  53,-991 }, {  54,-991 }, {  55,-991 }, {  56,-991 }, {  57,-991 },
 {  58,-991 }, {  59,-991 }, {  60,-991 }, {  61,-991 }, {   0,   0 },
 {  63,-991 }, {  64,-991 }, {  65,-991 }, {  66,-991 }, {  67,-991 },
 {  68,-991 }, {  69,-991 }, {  70,-991 }, {  71,-991 }, {  72,-991 },
 {  73,-991 }, {  74,-991 }, {  75,-991 }, {  76,-991 }, {  77,-991 },

 {  78,-991 }, {  79,-991 }, {  80,-991 }, {  81,-991 }, {  82,-991 },
 {  83, 260 }, {  84,-991 }, {  85,-991 }, {  86,-991 }, {  87,-991 },
 {  88,-991 }, {  89,-991 }, {  90,-991 }, {  91,-991 }, {  92,-991 },
 {  93,-991 }, {  94,-991 }, {  95,-991 }, {  96,-991 }, {  97,-991 },
 {  98,-991 }, {  99,-991 }, { 100,-991 }, { 101,-991 }, { 102,-991 },
 { 103,-991 }, { 104,-991 }, { 105,-991 }, { 106,-991 }, { 107,-991 },
 { 108,-991 }, { 109,-991 }, { 110,-991 }, { 111,-991 }, { 112,-991 },
 { 113,-991 }, { 114,-991 }, { 115,-991 }, { 116,-991 }, { 117,-991 },
 { 118,-991 }, { 119,-991 }, { 120,-991 }, { 121,-991 }, { 122,-991 },
 { 123,-991 }, { 124,-991 }, { 125,-991 }, { 126,-991 }, { 127,-991 },

 { 128,-991 }, {   0,   7 }, {   0, 910 }, {   1,-1121 }, {   2,-1121 },
 {   3,-1121 }, {   4,-1121 }, {   5,-1121 }, {   6,-1121 }, {   7,-1121 },
 {   8,-1121 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1121 }, {  15,-1121 }, {  16,-1121 }, {  17,-1121 },
 {  18,-1121 }, {  19,-1121 }, {  20,-1121 }, {  21,-1121 }, {  22,-1121 },
 {  23,-1121 }, {  24,-1121 }, {  25,-1121 }, {  26,-1121 }, {  27,-1121 },
 {  28,-1121 }, {  29,-1121 }, {  30,-1121 }, {  31,-1121 }, {   0,   0 },
 {  33,-1121 }, {  34,-1121 }, {  35,-1121 }, {  36,-1121 }, {  37,-1121 },
 {  38,-1121 }, {  39,-1121 }, {  40,-1121 }, {  41,-1121 }, {  42,-1121 },
 {  43,-1121 }, {  44,-1121 }, {  45,-1121 }, {  46,-1121 }, {  47,-1121 },

 {  48,-1121 }, {  49,-1121 }, {  50,-1121 }, {  51,-1121 }, {  52,-1121 },
 {  53,-1121 }, {  54,-1121 }, {  55,-1121 }, {  56,-1121 }, {  57,-1121 },
 {  58,-1121 }, {  59,-1121 }, {  60,-1121 }, {  61,-1121 }, {   0,   0 },
 {  63,-1121 }, {  64,-1121 }, {  65,-1121 }, {  66,-1121 }, {  67,-1121 },
 {  68,-1121 }, {  69,-1121 }, {  70,-1121 }, {  71,-1121 }, {  72,-1121 },
 {  73,-1121 }, {  74,-1121 }, {  75,-1121 }, {  76,-1121 }, {  77,-1121 },
 {  78,-1121 }, {  79,-1121 }, {  80,-1121 }, {  81,-1121 }, {  82,-1121 },
 {  83,-1121 }, {  84,-1121 }, {  85, 260 }, {  86,-1121 }, {  87,-1121 },
 {  88,-1121 }, {  89,-1121 }, {  90,-1121 }, {  91,-1121 }, {  92,-1121 },
 {  93,-1121 }, {  94,-1121 }, {  95,-1121 }, {  96,-1121 }, {  97,-1121 },

 {  98,-1121 }, {  99,-1121 }, { 100,-1121 }, { 101,-1121 }, { 102,-1121 },
 { 103,-1121 }, { 104,-1121 }, { 105,-1121 }, { 106,-1121 }, { 107,-1121 },
 { 108,-1121 }, { 109,-1121 }, { 110,-1121 }, { 111,-1121 }, { 112,-1121 },
 { 113,-1121 }, { 114,-1121 }, { 115,-1121 }, { 116,-1121 }, { 117,-1121 },
 { 118,-1121 }, { 119,-1121 }, { 120,-1121 }, { 121,-1121 }, { 122,-1121 },
 { 123,-1121 }, { 124,-1121 }, { 125,-1121 }, { 126,-1121 }, { 127,-1121 },
 { 128,-1121 }, {   0,   7 }, {   0, 780 }, {   1,-1251 }, {   2,-1251 },
 {   3,-1251 }, {   4,-1251 }, {   5,-1251 }, {   6,-1251 }, {   7,-1251 },
 {   8,-1251 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1251 }, {  15,-1251 }, {  16,-1251 }, {  17,-1251 },

 {  18,-1251 }, {  19,-1251 }, {  20,-1251 }, {  21,-1251 }, {  22,-1251 },
 {  23,-1251 }, {  24,-1251 }, {  25,-1251 }, {  26,-1251 }, {  27,-1251 },
 {  28,-1251 }, {  29,-1251 }, {  30,-1251 }, {  31,-1251 }, {   0,   0 },
 {  33,-1251 }, {  34,-1251 }, {  35,-1251 }, {  36,-1251 }, {  37,-1251 },
 {  38,-1251 }, {  39,-1251 }, {  40,-1251 }, {  41,-1251 }, {  42,-1251 },
 {  43,-1251 }, {  44,-1251 }, {  45,-1251 }, {  46,-1251 }, {  47,-1251 },
 {  48,-1251 }, {  49,-1251 }, {  50,-1251 }, {  51,-1251 }, {  52,-1251 },
 {  53,-1251 }, {  54,-1251 }, {  55,-1251 }, {  56,-1251 }, {  57,-1251 },
 {  58,-1251 }, {  59,-1251 }, {  60,-1251 }, {  61,-1251 }, {   0,   0 },
 {  63,-1251 }, {  64,-1251 }, {  65,-1251 }, {  66,-1251 }, {  67,-1251 },

 {  68,-1251 }, {  69,-1251 }, {  70,-1251 }, {  71,-1251 }, {  72,-1251 },
 {  73,-1251 }, {  74,-1251 }, {  75,-1251 }, {  76,-1251 }, {  77,-1251 },
 {  78,-1251 }, {  79,-1251 }, {  80,-1251 }, {  81,-1251 }, {  82,-1251 },
 {  83,-1251 }, {  84, 260 }, {  85,-1251 }, {  86,-1251 }, {  87,-1251 },
 {  88,-1251 }, {  89,-1251 }, {  90,-1251 }, {  91,-1251 }, {  92,-1251 },
 {  93,-1251 }, {  94,-1251 }, {  95,-1251 }, {  96,-1251 }, {  97,-1251 },
 {  98,-1251 }, {  99,-1251 }, { 100,-1251 }, { 101,-1251 }, { 102,-1251 },
 { 103,-1251 }, { 104,-1251 }, { 105,-1251 }, { 106,-1251 }, { 107,-1251 },
 { 108,-1251 }, { 109,-1251 }, { 110,-1251 }, { 111,-1251 }, { 112,-1251 },
 { 113,-1251 }, { 114,-1251 }, { 115,-1251 }, { 116,-1251 }, { 117,-1251 },

 { 118,-1251 }, { 119,-1251 }, { 120,-1251 }, { 121,-1251 }, { 122,-1251 },
 { 123,-1251 }, { 124,-1251 }, { 125,-1251 }, { 126,-1251 }, { 127,-1251 },
 { 128,-1251 }, {   0,   7 }, {   0, 650 }, {   1,-1381 }, {   2,-1381 },
 {   3,-1381 }, {   4,-1381 }, {   5,-1381 }, {   6,-1381 }, {   7,-1381 },
 {   8,-1381 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1381 }, {  15,-1381 }, {  16,-1381 }, {  17,-1381 },
 {  18,-1381 }, {  19,-1381 }, {  20,-1381 }, {  21,-1381 }, {  22,-1381 },
 {  23,-1381 }, {  24,-1381 }, {  25,-1381 }, {  26,-1381 }, {  27,-1381 },
 {  28,-1381 }, {  29,-1381 }, {  30,-1381 }, {  31,-1381 }, {   0,   0 },
 {  33,-1381 }, {  34,-1381 }, {  35,-1381 }, {  36,-1381 }, {  37,-1381 },

 {  38,-1381 }, {  39,-1381 }, {  40,-1381 }, {  41,-1381 }, {  42,-1381 },
 {  43,-1381 }, {  44,-1381 }, {  45,-1381 }, {  46,-1381 }, {  47,-1381 },
 {  48,-1381 }, {  49,-1381 }, {  50,-1381 }, {  51,-1381 }, {  52,-1381 },
 {  53,-1381 }, {  54,-1381 }, {  55,-1381 }, {  56,-1381 }, {  57,-1381 },
 {  58,-1381 }, {  59,-1381 }, {  60,-1381 }, {  61,-1381 }, {   0,   0 },
 {  63,-1381 }, {  64,-1381 }, {  65,-1381 }, {  66,-1381 }, {  67,-1381 },
 {  68,-1381 }, {  69,-1381 }, {  70,-1381 }, {  71,-1381 }, {  72,-1381 },
 {  73,-1381 }, {  74,-1381 }, {  75,-1381 }, {  76,-1381 }, {  77,-1381 },
 {  78,-1381 }, {  79,-1381 }, {  80,-1381 }, {  81,-1381 }, {  82,-1381 },
 {  83, 260 }, {  84,-1381 }, {  85,-1381 }, {  86,-1381 }, {  87,-1381 },

 {  88,-1381 }, {  89,-1381 }, {  90,-1381 }, {  91,-1381 }, {  92,-1381 },
 {  93,-1381 }, {  94,-1381 }, {  95,-1381 }, {  96,-1381 }, {  97,-1381 },
 {  98,-1381 }, {  99,-1381 }, { 100,-1381 }, { 101,-1381 }, { 102,-1381 },
 { 103,-1381 }, { 104,-1381 }, { 105,-1381 }, { 106,-1381 }, { 107,-1381 },
 { 108,-1381 }, { 109,-1381 }, { 110,-1381 }, { 111,-1381 }, { 112,-1381 },
 { 113,-1381 }, { 114,-1381 }, { 115,-1381 }, { 116,-1381 }, { 117,-1381 },
 { 118,-1381 }, { 119,-1381 }, { 120,-1381 }, { 121,-1381 }, { 122,-1381 },
 { 123,-1381 }, { 124,-1381 }, { 125,-1381 }, { 126,-1381 }, { 127,-1381 },
 { 128,-1381 }, {   0,   7 }, {   0, 520 }, {   1,-1511 }, {   2,-1511 },
 {   3,-1511 }, {   4,-1511 }, {   5,-1511 }, {   6,-1511 }, {   7,-1511 },

 {   8,-1511 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1511 }, {  15,-1511 }, {  16,-1511 }, {  17,-1511 },
 {  18,-1511 }, {  19,-1511 }, {  20,-1511 }, {  21,-1511 }, {  22,-1511 },
 {  23,-1511 }, {  24,-1511 }, {  25,-1511 }, {  26,-1511 }, {  27,-1511 },
 {  28,-1511 }, {  29,-1511 }, {  30,-1511 }, {  31,-1511 }, {   0,   0 },
 {  33,-1511 }, {  34,-1511 }, {  35,-1511 }, {  36,-1511 }, {  37,-1511 },
 {  38,-1511 }, {  39,-1511 }, {  40,-1511 }, {  41,-1511 }, {  42,-1511 },
 {  43,-1511 }, {  44,-1511 }, {  45,-1511 }, {  46,-1511 }, {  47,-1511 },
 {  48,-1511 }, {  49,-1511 }, {  50,-1511 }, {  51,-1511 }, {  52,-1511 },
 {  53,-1511 }, {  54,-1511 }, {  55,-1511 }, {  56,-1511 }, {  57,-1511 },

 {  58,-1511 }, {  59,-1511 }, {  60,-1511 }, {  61,-1511 }, {   0,   0 },
 {  63,-1511 }, {  64,-1511 }, {  65, 260 }, {  66,-1511 }, {  67,-1511 },
 {  68,-1511 }, {  69,-1511 }, {  70,-1511 }, {  71,-1511 }, {  72,-1511 },
 {  73,-1511 }, {  74,-1511 }, {  75,-1511 }, {  76,-1511 }, {  77,-1511 },
 {  78,-1511 }, {  79,-1511 }, {  80,-1511 }, {  81,-1511 }, {  82,-1511 },
 {  83,-1511 }, {  84,-1511 }, {  85,-1511 }, {  86,-1511 }, {  87,-1511 },
 {  88,-1511 }, {  89,-1511 }, {  90,-1511 }, {  91,-1511 }, {  92,-1511 },
 {  93,-1511 }, {  94,-1511 }, {  95,-1511 }, {  96,-1511 }, {  97,-1511 },
 {  98,-1511 }, {  99,-1511 }, { 100,-1511 }, { 101,-1511 }, { 102,-1511 },
 { 103,-1511 }, { 104,-1511 }, { 105,-1511 }, { 106,-1511 }, { 107,-1511 },

 { 108,-1511 }, { 109,-1511 }, { 110,-1511 }, { 111,-1511 }, { 112,-1511 },
 { 113,-1511 }, { 114,-1511 }, { 115,-1511 }, { 116,-1511 }, { 117,-1511 },
 { 118,-1511 }, { 119,-1511 }, { 120,-1511 }, { 121,-1511 }, { 122,-1511 },
 { 123,-1511 }, { 124,-1511 }, { 125,-1511 }, { 126,-1511 }, { 127,-1511 },
 { 128,-1511 }, {   0,   4 }, {   0, 390 }, {   1,-1641 }, {   2,-1641 },
 {   3,-1641 }, {   4,-1641 }, {   5,-1641 }, {   6,-1641 }, {   7,-1641 },
 {   8,-1641 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1641 }, {  15,-1641 }, {  16,-1641 }, {  17,-1641 },
 {  18,-1641 }, {  19,-1641 }, {  20,-1641 }, {  21,-1641 }, {  22,-1641 },
 {  23,-1641 }, {  24,-1641 }, {  25,-1641 }, {  26,-1641 }, {  27,-1641 },

 {  28,-1641 }, {  29,-1641 }, {  30,-1641 }, {  31,-1641 }, {   0,   0 },
 {  33,-1641 }, {  34,-1641 }, {  35,-1641 }, {  36,-1641 }, {  37,-1641 },
 {  38,-1641 }, {  39,-1641 }, {  40,-1641 }, {  41,-1641 }, {  42,-1641 },
 {  43,-1641 }, {  44,-1641 }, {  45,-1641 }, {  46,-1641 }, {  47,-1641 },
 {  48,-1641 }, {  49,-1641 }, {  50,-1641 }, {  51,-1641 }, {  52,-1641 },
 {  53,-1641 }, {  54,-1641 }, {  55,-1641 }, {  56,-1641 }, {  57,-1641 },
 {  58,-1641 }, {  59,-1641 }, {  60,-1641 }, {  61,-1641 }, {   0,   0 },
 {  63,-1641 }, {  64,-1641 }, {  65,-1641 }, {  66,-1641 }, {  67,-1641 },
 {  68,-1641 }, {  69,-1641 }, {  70,-1641 }, {  71,-1641 }, {  72,-1641 },
 {  73,-1641 }, {  74,-1641 }, {  75,-1641 }, {  76,-1641 }, {  77,-1641 },

 {  78,-1641 }, {  79,-1641 }, {  80,-1641 }, {  81,-1641 }, {  82,-1641 },
 {  83,-1641 }, {  84,-1641 }, {  85,-1641 }, {  86,-1641 }, {  87,-1641 },
 {  88,-1641 }, {  89,-1641 }, {  90,-1641 }, {  91,-1641 }, {  92,-1641 },
 {  93,-1641 }, {  94,-1641 }, {  95,-1641 }, {  96,-1641 }, {  97,-1641 },
 {  98,-1641 }, {  99,-1641 }, { 100,-1641 }, { 101,-1641 }, { 102,-1641 },
 { 103,-1641 }, { 104,-1641 }, { 105,-1641 }, { 106,-1641 }, { 107,-1641 },
 { 108,-1641 }, { 109,-1641 }, { 110,-1641 }, { 111,-1641 }, { 112,-1641 },
 { 113,-1641 }, { 114,-1641 }, { 115,-1641 }, { 116,-1641 }, { 117,-1641 },
 { 118,-1641 }, { 119,-1641 }, { 120,-1641 }, { 121,-1641 }, { 122,-1641 },
 { 123,-1641 }, { 124,-1641 }, { 125,-1641 }, { 126,-1641 }, { 127,-1641 },

 { 128,-1641 }, {   0,   7 }, {   0, 260 }, {   1,-1771 }, {   2,-1771 },
 {   3,-1771 }, {   4,-1771 }, {   5,-1771 }, {   6,-1771 }, {   7,-1771 },
 {   8,-1771 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1771 }, {  15,-1771 }, {  16,-1771 }, {  17,-1771 },
 {  18,-1771 }, {  19,-1771 }, {  20,-1771 }, {  21,-1771 }, {  22,-1771 },
 {  23,-1771 }, {  24,-1771 }, {  25,-1771 }, {  26,-1771 }, {  27,-1771 },
 {  28,-1771 }, {  29,-1771 }, {  30,-1771 }, {  31,-1771 }, {   0,   0 },
 {  33,-1771 }, {  34,-1771 }, {  35,-1771 }, {  36,-1771 }, {  37,-1771 },
 {  38,-1771 }, {  39,-1771 }, {  40,-1771 }, {  41,-1771 }, {  42,-1771 },
 {  43,-1771 }, {  44,-1771 }, {  45,-1771 }, {  46,-1771 }, {  47,-1771 },

 {  48,-1771 }, {  49,-1771 }, {  50,-1771 }, {  51,-1771 }, {  52,-1771 },
 {  53,-1771 }, {  54,-1771 }, {  55,-1771 }, {  56,-1771 }, {  57,-1771 },
 {  58,-1771 }, {  59,-1771 }, {  60,-1771 }, {  61,-1771 }, {   0,   0 },
 {  63,-1771 }, {  64,-1771 }, {  65,-1771 }, {  66,-1771 }, {  67,-1771 },
 {  68,-1771 }, {  69,-1771 }, {  70,-1771 }, {  71,-1771 }, {  72,-1771 },
 {  73,-1771 }, {  74,-1771 }, {  75,-1771 }, {  76, 130 }, {  77,-1771 },
 {  78,-1771 }, {  79,-1771 }, {  80,-1771 }, {  81,-1771 }, {  82,-1771 },
 {  83,-1771 }, {  84,-1771 }, {  85,-1771 }, {  86,-1771 }, {  87,-1771 },
 {  88,-1771 }, {  89,-1771 }, {  90,-1771 }, {  91,-1771 }, {  92,-1771 },
 {  93,-1771 }, {  94,-1771 }, {  95,-1771 }, {  96,-1771 }, {  97,-1771 },

 {  98,-1771 }, {  99,-1771 }, { 100,-1771 }, { 101,-1771 }, { 102,-1771 },
 { 103,-1771 }, { 104,-1771 }, { 105,-1771 }, { 106,-1771 }, { 107,-1771 },
 { 108,-1771 }, { 109,-1771 }, { 110,-1771 }, { 111,-1771 }, { 112,-1771 },
 { 113,-1771 }, { 114,-1771 }, { 115,-1771 }, { 116,-1771 }, { 117,-1771 },
 { 118,-1771 }, { 119,-1771 }, { 120,-1771 }, { 121,-1771 }, { 122,-1771 },
 { 123,-1771 }, { 124,-1771 }, { 125,-1771 }, { 126,-1771 }, { 127,-1771 },
 { 128,-1771 }, {   0,   1 }, {   0, 130 }, {   1,-1901 }, {   2,-1901 },
 {   3,-1901 }, {   4,-1901 }, {   5,-1901 }, {   6,-1901 }, {   7,-1901 },
 {   8,-1901 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  14,-1901 }, {  15,-1901 }, {  16,-1901 }, {  17,-1901 },

 {  18,-1901 }, {  19,-1901 }, {  20,-1901 }, {  21,-1901 }, {  22,-1901 },
 {  23,-1901 }, {  24,-1901 }, {  25,-1901 }, {  26,-1901 }, {  27,-1901 },
 {  28,-1901 }, {  29,-1901 }, {  30,-1901 }, {  31,-1901 }, {   0,   0 },
 {  33,-1901 }, {  34,-1901 }, {  35,-1901 }, {  36,-1901 }, {  37,-1901 },
 {  38,-1901 }, {  39,-1901 }, {  40,-1901 }, {  41,-1901 }, {  42,-1901 },
 {  43,-1901 }, {  44,-1901 }, {  45,-1901 }, {  46,-1901 }, {  47,-1901 },
 {  48,-1901 }, {  49,-1901 }, {  50,-1901 }, {  51,-1901 }, {  52,-1901 },
 {  53,-1901 }, {  54,-1901 }, {  55,-1901 }, {  56,-1901 }, {  57,-1901 },
 {  58,-1901 }, {  59,-1901 }, {  60,-1901 }, {  61,-1901 }, {   0,   0 },
 {  63,-1901 }, {  64,-1901 }, {  65,-1901 }, {  66,-1901 }, {  67,-1901 },

 {  68,-1901 }, {  69,-1901 }, {  70,-1901 }, {  71,-1901 }, {  72,-1901 },
 {  73,-1901 }, {  74,-1901 }, {  75,-1901 }, {  76,-1901 }, {  77,-1901 },
 {  78,-1901 }, {  79,-1901 }, {  80,-1901 }, {  81,-1901 }, {  82,-1901 },
 {  83,-1901 }, {  84,-1901 }, {  85,-1901 }, {  86,-1901 }, {  87,-1901 },
 {  88,-1901 }, {  89,-1901 }, {  90,-1901 }, {  91,-1901 }, {  92,-1901 },
 {  93,-1901 }, {  94,-1901 }, {  95,-1901 }, {  96,-1901 }, {  97,-1901 },
 {  98,-1901 }, {  99,-1901 }, { 100,-1901 }, { 101,-1901 }, { 102,-1901 },
 { 103,-1901 }, { 104,-1901 }, { 105,-1901 }, { 106,-1901 }, { 107,-1901 },
 { 108,-1901 }, { 109,-1901 }, { 110,-1901 }, { 111,-1901 }, { 112,-1901 },
 { 113,-1901 }, { 114,-1901 }, { 115,-1901 }, { 116,-1901 }, { 117,-1901 },

 { 118,-1901 }, { 119,-1901 }, { 120,-1901 }, { 121,-1901 }, { 122,-1901 },
 { 123,-1901 }, { 124,-1901 }, { 125,-1901 }, { 126,-1901 }, { 127,-1901 },
 { 128,-1901 }, { 129,  11 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[11] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    &yy_transition[263],
    &yy_transition[393],
    &yy_transition[523],
    &yy_transition[653],
    &yy_transition[783],
    &yy_transition[913],
    &yy_transition[1043],
    &yy_transition[1173],


    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "seqscan.ll"
#define INITIAL 0
/*  Nigla - Logarithmic Sequence Alignments
    Copyright (C) 2005  Reed A. Cartwright

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#line 20 "seqscan.ll"
	#include "ngila.h"
	#include "seqparse.h"
	
	#define yylval seq_lval
	using namespace std;
	int nLine = 1;
#define YY_NO_UNPUT 1
#define aln 1

#define fsa 2

#define phy 3

#define nex 4

#line 1281 "seqscan.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 43 "seqscan.ll"


#line 1435 "seqscan.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos + 1;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "seqscan.ll"
{
	yyless(0);
	BEGIN(aln);
	return CLUSTAL;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "seqscan.ll"
{
	yyless(0);
	BEGIN(fsa);
	return FASTA;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "seqscan.ll"
{
	yyless(0);
	BEGIN(phy);
	return PHYLIP;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "seqscan.ll"
{
	yyless(0);
	BEGIN(nex);
	return NEXUS;
}
	YY_BREAK
case YY_STATE_EOF(fsa):
case YY_STATE_EOF(aln):
case YY_STATE_EOF(phy):
case YY_STATE_EOF(nex):
#line 69 "seqscan.ll"
{
	BEGIN(INITIAL);
	return ENDL;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "seqscan.ll"
{
	yylval.ch = yytext[0];
	return yytext[0];
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "seqscan.ll"
{
	yylval.n = atoi(yytext);
	return NUMBER;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "seqscan.ll"
{
	yylval.cs = strdup(yytext);
	return WORD;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "seqscan.ll"
{
	// Skip space
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "seqscan.ll"
{
	nLine++;
	return ENDL;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 98 "seqscan.ll"
{
	yyterminate();	
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "seqscan.ll"
ECHO;
	YY_BREAK
#line 1609 "seqscan.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start_state_list[yy_start];

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register int yy_c = 128;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 102 "seqscan.ll"


void seq_error(char *s)
{
	fprintf(stderr, "ALERT (line %d): %s: \"%s\".\n", nLine, s, yytext);
}
